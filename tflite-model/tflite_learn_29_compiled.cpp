/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 07.02.2024 14:54:36

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 16
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 14928;
#else
constexpr int kTensorArenaSize = 13904;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,32,32,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.003701037960126996, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 256, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[2] = { -2404, 2404, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<1, float> quant2_scale = { 1, { 4.1377581510460004e-05, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*256] = { 
  76, -90, 43, -78, 108, -26, -67, -36, -21, -64, 81, 64, 47, -9, 11, -58, 103, 48, 64, 18, 70, 61, -5, 75, -29, -57, 51, 72, 26, -22, 76, -6, -78, 53, 0, 121, -86, 73, 35, 106, 87, 98, -51, 81, -34, 25, -70, 56, -103, 58, -9, -71, 63, 33, 46, 72, 6, -40, -89, 40, 17, 72, -82, 49, -37, -29, -78, -56, -25, 116, 94, -52, 37, -50, 61, -11, -1, 58, -13, -47, -34, 58, 91, 71, 28, -12, 51, 34, -32, -57, 74, 34, -14, 50, 41, 43, -23, -33, 37, -33, -39, 5, 40, -38, -48, -11, -59, 56, -18, 75, 3, 27, -51, 54, 82, -71, 57, 49, 54, 41, 87, -23, -72, -53, 63, 56, -53, 64, -48, -36, 28, -37, -12, 5, 7, -48, 72, 27, -12, 77, 54, 44, 110, -26, -16, 45, 21, 51, 68, 67, 79, 61, -18, -23, 66, 6, -46, 37, 12, -103, -73, -32, 56, -26, -49, -47, 54, 15, 70, 54, -59, 68, -34, -45, -44, -60, 9, 27, 83, -40, 24, -44, 35, 54, 63, -32, -66, 68, -51, 15, -45, 64, 29, -62, -77, 31, 59, 41, 30, 17, 64, -21, 64, -10, -23, 32, -48, 44, 84, 15, 67, 40, 47, -21, -8, -38, 93, 8, 76, 47, 117, 61, 27, -37, -33, -48, 23, -27, -43, -44, 55, -19, -51, 56, -72, 31, -30, -34, -52, -58, 45, 49, 22, -15, 50, -26, 7, 27, 59, -59, -35, -19, -48, 52, -11, 78, 
  -110, 57, -5, 41, -108, 27, 54, 24, -9, 13, -55, -43, -53, 20, -28, 91, -94, -82, -81, -23, -38, -57, 27, -96, -3, 17, -43, -37, 9, 8, -58, -33, 53, -98, -55, -127, 79, -54, -28, -73, -86, -75, 83, -32, 62, -49, 26, -45, 78, -63, -1, 81, -21, -4, -4, -62, -13, 49, 92, -24, 3, -76, 92, -4, 6, 25, 61, 29, 43, -91, -109, 56, -74, 37, -39, 33, -30, -58, -44, 71, 11, -68, -126, -30, -42, 8, -93, -63, 30, 29, -55, -88, 16, -66, -11, -34, 23, 69, -90, 7, 25, -43, -67, -5, 12, 32, 26, -72, 49, -81, 0, -63, 72, -75, -67, 29, -50, -41, -32, 14, -47, 51, 26, 39, -42, -57, 14, -66, 34, 37, -23, 61, 23, -49, 31, 10, -51, 0, 24, -65, -78, -27, -111, 45, 43, -37, -31, -48, -74, -62, -56, -69, 61, 67, -40, -34, 51, -55, -42, 94, 78, 45, -28, 17, 31, 43, -49, 16, -67, -54, 17, -70, 22, 13, 47, 43, 30, -48, -72, 56, -16, 21, -24, -29, -62, 17, 6, -55, 27, -11, 41, -42, -62, 16, 42, 3, -31, -67, -9, -26, -86, 57, -72, 33, 35, -72, 39, -39, -84, -31, -21, -68, -75, 11, 21, 31, -74, -4, -43, -54, -113, -59, -47, 78, 46, 56, -34, 18, 54, 19, -23, 29, 48, -11, 72, -48, 27, 68, 54, 18, -59, -44, 11, 36, -22, 23, -59, -4, -43, 53, 29, 27, 61, -80, 51, -44, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 2,256 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0047936192713677883, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[64] = { -29, -1272, 1024, -2272, 1133, -949, -290, -2325, 1766, -3000, 2244, -469, 1122, 970, -3854, 2814, 2117, 2195, -230, 175, 1759, 176, 897, -1665, 539, -2413, -282, -132, 97, 1396, 1200, 2668, 558, 294, -123, 93, -705, 177, 40, -110, -361, -24, 792, 646, -4433, -2880, -1594, -2926, 5976, -725, 433, -1159, 444, -651, 426, -361, 1498, 365, 912, -1212, 1032, 1445, 1478, -185, };
const TfArray<1, int> tensor_dimension4 = { 1, { 64 } };
const TfArray<64, float> quant4_scale = { 64, { 1.1579269084904809e-05, 9.7144647952518426e-06, 1.0851656043087132e-05, 1.0184880920860451e-05, 1.0170567293243948e-05, 1.0941109394480009e-05, 1.3648479580297135e-05, 8.9187178673455492e-06, 1.3114658941049129e-05, 9.0430721684242599e-06, 9.3246853793971241e-06, 1.0730920621426776e-05, 1.029428585752612e-05, 1.2151296687079594e-05, 8.8574433902977034e-06, 1.0022385140473489e-05, 1.355691347271204e-05, 9.7293414000887424e-06, 1.1964442819589749e-05, 9.3049065981176682e-06, 9.8101327239419334e-06, 9.9855997177655809e-06, 1.1069651009165682e-05, 1.1974314475082792e-05, 8.4209168562665582e-06, 1.0430620022816584e-05, 1.1203233043488581e-05, 1.0150337402592413e-05, 1.056244127539685e-05, 7.9577648648410104e-06, 9.6890826171147637e-06, 1.2468806744436733e-05, 1.042468284140341e-05, 1.0855063010239974e-05, 9.8685186458169483e-06, 9.4631905085407197e-06, 1.2083615729352459e-05, 1.0583733455860056e-05, 1.017830891214544e-05, 9.7446636573295109e-06, 1.0467181709827855e-05, 9.4898614406702109e-06, 1.1368113518983591e-05, 1.0356011443946045e-05, 8.0664567576604895e-06, 8.4939483713242225e-06, 9.0152752818539739e-06, 7.5204757195024285e-06, 1.0148682122235186e-05, 1.0611450306896586e-05, 9.4874521892052144e-06, 9.2506525106728077e-06, 1.0592691978672519e-05, 1.027034977596486e-05, 7.8178391049732454e-06, 1.244665418198565e-05, 1.0829082384589128e-05, 9.6331814347649924e-06, 1.3478912478603888e-05, 1.3451761333271861e-05, 8.3122849900973961e-06, 9.3148410087451339e-06, 1.0670752089936286e-05, 1.8044160242425278e-05, } };
const TfArray<64, int> quant4_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[64*3*3*32] = { 
  /* [0][0][][] */ -30,-26,52,-6,-33,-17,-11,40,-61,-12,-22,37,-17,-14,-59,-2,-8,12,-48,27,17,-19,-46,-41,-21,-4,-44,6,1,13,8,-39, 29,-11,-102,-14,-53,17,-23,-64,-50,3,37,-63,-45,-37,-43,9,5,20,-2,26,-13,-29,45,-63,-2,-64,31,-41,-81,17,-50,2, 7,-63,-41,-16,-16,39,-35,11,-24,39,27,34,-3,-35,-69,24,-35,52,-21,-41,55,-29,-44,5,29,-8,-74,-12,-39,-55,-9,-33, 
  /* [0][1][][] */ 47,69,41,-18,-4,2,-48,53,20,-29,-49,-4,-9,87,24,13,41,-11,5,2,-51,-24,-28,5,-62,30,-28,-13,10,10,-20,16, -21,6,43,-37,-57,3,-8,8,-84,-2,-86,8,-3,13,-110,13,12,12,-29,-39,17,44,-127,-28,-34,21,7,-16,-7,-44,-19,-37, 5,15,41,63,49,2,34,-54,53,9,-8,18,-7,-2,40,20,-6,-7,12,56,-3,-35,-2,55,69,47,-41,0,33,0,-25,-24, 
  /* [0][2][][] */ 25,71,6,28,41,-17,77,26,62,-20,35,-1,-24,7,84,75,0,29,6,2,3,12,57,30,115,0,1,67,-1,69,27,50, 13,-19,-31,-13,-3,-1,-59,15,-63,-8,-38,25,34,9,-22,-45,-14,-59,3,-16,-7,29,-8,24,24,-28,4,-21,14,-45,0,-3, -39,-38,-45,38,54,5,39,15,-5,-38,5,1,5,9,-12,-15,35,-30,-56,-51,-69,59,-23,46,-43,17,-40,-10,10,16,77,44, 
  /* [1][0][][] */ -25,-93,-42,3,-59,29,-55,1,-39,1,67,-12,37,-59,-25,-86,11,-42,28,7,-11,30,7,-49,-70,27,52,21,-28,-68,-4,25, 47,-17,-5,-21,-78,80,-16,-94,-2,9,10,0,7,4,81,25,-59,-21,-19,-38,-13,-80,-50,9,-13,-104,46,-20,-40,-36,-75,59, -7,42,-38,-70,-94,78,-7,41,-20,10,-39,79,-20,6,-27,-14,64,-10,-13,-27,-11,20,-87,0,-88,-5,-41,-15,35,21,4,31, 
  /* [1][1][][] */ 5,-57,-46,-1,-12,47,-91,24,-2,46,-7,8,-49,-9,-120,-3,-7,30,41,39,-7,-51,-17,-35,-83,4,-36,2,17,-80,-18,-30, 14,36,34,47,-18,31,-5,-56,-12,21,-17,43,-44,-16,30,-29,-46,-21,-24,22,32,-31,-21,40,-75,-15,-34,-2,10,-24,-90,-71, 19,47,-15,0,-70,43,-89,-2,-32,18,-17,37,11,17,-9,-2,-7,-6,-6,-26,26,-70,-80,9,-125,26,-3,-91,25,-62,1,40, 
  /* [1][2][][] */ -11,-43,-11,-70,-46,9,-73,23,-73,14,-45,8,30,-52,-124,24,35,33,46,10,43,17,34,-16,-90,2,4,-11,4,-12,35,-55, 53,-56,53,-20,-71,46,-106,-50,-84,36,-40,26,-1,-41,-70,1,-50,45,-32,26,-5,-49,-41,-25,-57,30,-55,-47,-13,-54,-106,-104, 22,41,63,-1,-25,-4,-127,-36,-49,36,-93,31,12,-36,10,-66,25,3,48,7,10,-82,-82,23,-39,2,21,-113,1,-81,-42,3, 
  /* [2][0][][] */ -17,5,-14,-28,-53,-16,-19,-67,-11,6,-8,-2,13,-9,50,-6,-66,-19,-21,-58,26,-64,-112,-67,-57,-49,33,22,10,11,-38,29, 17,-3,4,-53,-52,57,-18,-5,-40,25,11,42,-40,23,-24,-38,32,-23,-11,-40,29,-3,-49,-6,-17,1,-17,11,12,39,-27,9, -12,-17,4,-3,6,-3,-6,24,-5,-62,-40,29,40,15,-59,4,-10,-42,-61,-20,-67,45,-16,9,-37,36,-47,-65,35,-107,39,-14, 
  /* [2][1][][] */ 7,-74,-59,22,-26,-22,-6,13,-32,-19,20,-33,-57,-58,-19,-44,-53,-17,-42,-14,21,-36,-16,-32,-47,-107,-45,-27,-55,-47,-74,-24, 41,5,-17,21,-66,23,-84,-16,2,23,-52,35,-54,31,-4,-9,25,37,-33,-5,7,22,-4,11,-126,-1,3,-62,39,-36,-22,35, -58,15,-37,13,-11,49,-9,48,-7,-26,15,35,52,8,-36,44,12,25,-80,-26,-68,45,-41,-9,-55,39,-26,-81,21,-49,4,18, 
  /* [2][2][][] */ 9,-49,6,5,-30,51,-92,2,-10,15,-4,20,-86,5,-87,-10,-32,35,-16,21,-12,-20,-17,-4,-54,-43,-115,-9,13,-86,-127,-66, 21,50,36,37,-7,31,-50,-33,-8,29,-64,48,-15,9,102,-33,1,6,13,-4,-1,-31,-26,70,-85,25,-45,-66,10,-68,-42,22, -12,31,22,-57,-42,-10,-37,65,-38,0,-40,6,35,-4,-53,-8,-14,-17,-12,-46,-19,42,-49,1,-80,0,-15,-46,11,-87,72,23, 
  /* [3][0][][] */ -24,-17,36,-61,-43,-9,-63,-21,-81,-28,-85,-27,-43,12,-7,-23,-14,39,-4,20,45,-25,-103,-34,-127,-14,21,-35,17,-38,24,-13, -42,-33,8,-23,-44,4,-52,-10,-16,45,77,-54,-25,-19,-105,-17,36,-32,43,-3,-52,-35,42,-29,-65,-25,41,40,-5,3,9,-85, 13,-21,-1,47,5,-25,-24,5,-14,-7,44,36,9,-45,-22,-1,5,25,-56,-9,17,-42,8,-9,20,-18,-41,-56,-52,-25,-14,-43, 
  /* [3][1][][] */ 7,-69,-34,-10,-84,85,9,11,-2,-58,70,-15,82,-6,10,-5,-52,-34,16,-8,-42,-7,-7,8,0,-39,26,41,22,-31,-1,56, -14,12,67,-50,-73,53,-47,26,-57,20,40,13,21,-10,-39,66,-37,18,14,-27,50,5,-14,-44,-75,-29,22,13,9,-33,-22,29, 9,8,52,22,3,28,-83,-13,10,30,2,38,-2,62,-52,7,43,-30,-3,16,22,9,-60,63,-40,32,-19,11,4,-37,-21,-20, 
  /* [3][2][][] */ 28,-20,-35,-4,5,36,13,63,4,21,65,5,-53,-73,-42,-25,2,8,14,7,7,-58,-10,-12,-61,-51,63,15,-38,-21,2,-11, 42,36,-94,-17,-3,-15,-43,-41,2,-13,-52,38,-108,16,11,-47,-13,-15,-10,-3,-11,-63,14,-41,-52,-101,29,39,-41,28,-70,42, -3,41,-35,-26,5,60,13,73,47,-18,-28,52,-36,-10,1,-34,3,6,-35,-62,-73,60,3,50,-67,-6,-127,-18,35,-45,-1,75, 
  /* [4][0][][] */ -28,29,40,-33,-62,-76,-31,37,-45,-56,-45,-24,46,36,15,7,18,16,14,-11,-39,4,-30,-56,-34,8,-31,-26,-7,-30,52,-17, -46,-19,49,-31,48,-2,2,-43,-25,14,11,-24,-35,-86,-32,13,12,13,-37,48,57,23,14,-51,43,23,30,-26,-11,34,-39,-38, -14,10,-38,59,108,-53,54,-13,80,-26,70,-36,-79,3,100,71,-20,10,33,80,66,19,110,55,127,12,-15,40,-22,49,60,-22, 
  /* [4][1][][] */ 20,36,-8,-6,5,26,-3,67,14,4,58,6,20,53,45,-14,44,-17,10,-30,-13,53,-17,10,16,-31,20,43,-6,46,-9,58, -54,-29,13,-39,24,-53,-31,-46,-32,12,-64,-67,79,-14,10,-27,37,-19,-26,-26,3,9,-78,-9,-22,-15,-15,-13,-46,-66,-36,-3, -62,-94,-6,12,-2,50,6,0,41,59,-53,10,0,25,-57,-19,-92,-14,5,72,-35,26,-16,31,8,30,-61,5,-16,-79,-34,-14, 
  /* [4][2][][] */ 46,-21,-15,-20,-7,33,8,16,27,11,4,-5,-18,1,64,-34,-23,23,8,-8,16,29,-41,17,71,36,-20,21,-27,34,-17,39, 38,38,-9,-49,-37,60,12,33,-21,22,-93,28,-21,19,-58,-31,10,-33,-9,7,-63,83,25,-20,1,2,-38,-16,13,-29,-58,56, -42,-26,-64,-47,-51,-10,-84,-85,-88,-25,-51,-58,40,-106,-12,-60,-46,-62,-92,-7,-17,46,-89,-20,-39,-27,-17,-2,2,-101,-47,22, 
  /* [5][0][][] */ -15,-33,-36,-89,3,-40,15,3,-1,-24,-59,-32,-31,-72,-81,-57,-34,9,-4,-29,29,-26,-24,-22,16,12,-19,-16,2,-107,-17,-25, -51,15,14,63,26,6,51,-18,78,-38,18,-47,53,48,51,29,-29,-40,58,23,-20,24,42,32,69,-4,-20,65,-9,36,30,-1, -41,54,-19,-1,6,-18,17,11,29,-32,46,-22,60,83,1,-15,-45,-3,60,25,5,-23,35,25,0,18,93,52,-24,17,42,34, 
  /* [5][1][][] */ 22,-35,-4,-34,-36,-41,-62,38,-20,29,-71,32,-42,-7,-40,-47,-36,32,-75,1,0,21,-120,-4,-34,7,-106,-80,-19,-37,21,14, 6,-36,-27,11,43,23,35,-27,6,0,49,15,-57,6,81,-58,-52,-40,-1,7,-19,-7,22,-5,49,0,23,35,-22,90,15,-33, -4,-7,-8,28,25,-31,59,34,32,-5,18,12,-73,18,84,-41,22,15,9,25,24,-35,37,2,127,-13,29,33,35,64,11,31, 
  /* [5][2][][] */ -18,-36,25,-29,-48,-17,-45,9,-20,-1,-53,-19,46,-34,-31,3,4,-16,-23,-26,-35,56,-49,-23,-80,49,-4,-42,-52,-44,37,18, -3,-59,7,-36,-29,-39,-63,-85,-16,8,40,21,6,-30,-23,-33,0,27,-14,-5,43,-44,-16,-47,-75,-19,47,-31,-18,17,-11,-36, 61,-45,5,-51,-38,3,-92,35,-84,15,14,42,1,-45,-38,-91,21,7,-73,-11,49,-44,-42,-23,-86,-6,-65,-58,1,-34,-12,18, 
  /* [6][0][][] */ -37,7,-51,47,81,-57,62,30,82,-15,49,-29,-20,-1,7,44,13,-27,30,34,14,9,127,26,45,-48,-2,51,-34,85,38,-25, -13,15,17,-6,-2,-6,-12,-11,-18,10,-31,-8,29,35,-18,-5,-43,17,13,22,26,-6,-21,30,-25,-10,-36,-59,-14,8,-15,-25, 38,1,78,53,-22,16,-8,-35,17,-20,-18,-11,20,-24,-27,-12,3,-8,-14,12,-6,11,59,-2,24,-12,-18,4,-3,25,-25,-35, 
  /* [6][1][][] */ -8,10,-12,-2,-14,-33,15,14,-19,-31,28,-6,-2,-10,-14,-2,-41,-13,-10,-13,-19,30,37,-4,38,-32,-30,12,-49,43,19,1, -3,16,-29,-26,-52,9,10,14,-7,-10,11,-39,9,21,53,-12,9,2,5,8,-16,-20,9,-3,15,9,80,10,16,-18,-14,35, 16,14,55,-6,-40,14,-17,-7,20,25,48,2,7,25,-13,2,27,22,8,-59,24,-46,-19,-3,-63,17,8,32,44,2,-32,23, 
  /* [6][2][][] */ -17,-83,1,-46,-39,22,-58,17,-43,21,-4,25,-15,-9,-63,-45,-5,-5,28,17,-6,-30,-21,-33,-18,21,-32,-14,5,-25,-28,-23, 39,-14,15,-42,-24,3,-25,-28,-24,-2,42,-7,-14,-55,10,-42,-13,23,32,-17,38,-37,-30,-49,-32,-12,30,7,-8,-39,-24,-33, 38,-19,-6,-36,-33,-20,-51,-2,-24,27,-36,5,2,-14,-12,-25,33,22,-24,-46,-1,-44,-18,-35,-15,-8,-8,-22,4,30,-25,-9, 
  /* [7][0][][] */ -64,-2,59,-36,-34,75,36,-35,13,-37,52,-2,-3,3,-82,46,18,-8,11,-17,7,-67,-32,-67,-40,30,-15,40,82,10,14,-45, -6,-8,74,-54,-81,-31,-103,-14,-30,-17,43,23,8,-34,12,-27,-2,14,-7,32,57,-18,-3,-48,-37,-52,-43,-51,-17,33,27,-103, 55,-60,10,4,-10,-16,15,39,-12,46,-45,-1,-21,-16,-70,-37,-13,80,13,-11,95,15,9,-42,47,38,-30,59,-33,9,-18,20, 
  /* [7][1][][] */ 23,10,-13,-38,19,54,-5,10,-30,30,65,32,-12,44,-64,-35,-40,8,4,-25,38,1,46,-62,-14,-30,21,27,36,-12,-13,65, -29,-11,-54,54,17,54,0,65,-4,-36,56,20,-15,-12,-64,-29,43,-23,31,-61,-42,24,-44,-7,-85,14,69,10,-23,-76,7,51, 14,0,-24,-8,-60,53,-21,-93,26,57,7,43,45,26,25,-7,-56,-3,-27,-24,3,-35,-36,-30,9,-31,66,62,-26,-15,-52,72, 
  /* [7][2][][] */ 70,-56,-53,10,-50,19,-32,-27,-34,32,-98,36,-127,-1,-33,-18,-6,14,-73,-56,-40,-35,46,6,4,-70,-87,-83,-95,16,-24,27, -66,-19,-43,18,-42,67,31,80,-8,59,33,21,-16,18,-10,17,33,27,-16,51,-82,42,4,10,-65,20,-34,-23,13,-44,-30,71, 59,-25,38,49,-63,-17,-4,-45,0,5,-21,5,-10,-42,22,58,40,50,14,2,86,-66,-17,-7,-39,1,-11,14,42,10,3,-46, 
  /* [8][0][][] */ -22,-50,44,-17,-20,-8,-56,-36,-79,-5,-94,-17,33,-17,-17,-78,1,19,-38,33,-3,-16,-127,-62,-28,-8,-47,-79,-15,-41,-63,25, -20,8,16,-9,-12,-28,11,-37,-43,-13,-38,-42,33,-12,4,0,-20,-13,-17,-19,13,-23,-66,6,-1,-18,-48,-22,-37,-72,-6,-3, -16,20,-8,-77,-18,-19,-42,37,-68,-17,-43,-6,-36,-30,-57,-10,34,3,-37,-19,-14,8,-53,-16,8,1,-98,-50,-33,-38,-3,-7, 
  /* [8][1][][] */ 15,-13,4,-11,8,-53,16,29,-21,-8,-14,-3,11,-75,-16,-3,41,10,-64,22,-14,24,-12,-21,24,25,18,-62,-2,-20,20,-29, 30,31,-28,47,44,-23,21,-3,57,19,37,-18,10,14,46,11,-48,-4,-18,33,41,25,51,45,46,-7,34,17,-20,14,14,-15, -7,-43,-14,-45,-28,25,-35,26,-8,36,-4,-18,9,56,18,-50,7,-10,37,-3,-19,-5,-12,-7,-44,10,-19,-29,40,35,0,29, 
  /* [8][2][][] */ -28,-19,17,-15,-28,21,-29,56,-31,-18,2,42,22,-24,-86,-39,-23,-11,-25,-2,5,25,-79,33,-48,43,6,-37,-16,-86,-14,7, -19,13,-18,60,57,-44,68,-2,49,-38,83,-29,-21,-8,36,45,-87,-11,32,50,-23,-6,60,24,81,8,59,68,-10,45,26,-44, 17,4,4,-37,0,-1,-38,-23,-25,0,1,17,-5,-11,43,-65,29,8,-4,6,15,-28,44,-13,20,5,-26,-5,-15,70,-21,20, 
  /* [9][0][][] */ 24,7,-32,37,-51,53,-36,-64,-29,-59,28,24,39,-6,35,44,-6,-7,10,13,27,-8,-127,-51,-113,-43,45,11,-8,-49,-32,76, 7,52,-6,-63,-59,2,-18,40,-50,28,7,73,-25,35,-49,-13,-3,-37,27,-17,116,-39,-90,26,-65,-38,56,15,44,12,-27,27, -1,9,-14,16,17,38,18,8,38,-31,31,58,15,61,-76,67,6,-11,-74,-13,-29,82,-6,-40,-68,-14,16,-28,6,-11,60,-14, 
  /* [9][1][][] */ -4,-60,29,-34,-43,31,-7,-92,2,6,32,-28,-78,-60,50,15,12,18,-4,-61,78,-21,-23,-85,-37,-58,-39,-2,39,-34,-12,-30, 63,-5,-27,-7,-85,-31,-93,-51,-13,45,-42,33,16,-12,0,7,57,-14,-64,33,-32,-21,-61,2,-54,-40,-66,-55,26,-32,-16,45, -19,-15,-9,-5,-19,40,0,98,30,11,-44,-5,11,2,-6,3,-4,-19,-30,-55,-55,5,-26,13,-73,-1,5,-67,63,-33,74,12, 
  /* [9][2][][] */ -16,-75,28,10,-33,63,-95,-54,30,35,-60,54,-49,18,-75,2,-11,45,39,26,32,-21,-12,23,-52,-20,-98,23,-24,-19,-106,-59, 16,36,33,3,-24,-9,-56,-21,30,31,-45,51,-39,9,55,8,-8,-12,-10,15,14,-27,13,69,-66,0,-36,-78,-5,-52,-54,-56, -43,35,-47,-53,-14,22,21,-12,-31,-17,-115,4,30,10,9,22,-32,-6,-3,-13,-87,3,-63,-35,-34,15,14,-15,33,-79,41,0, 
  /* [10][0][][] */ 18,-31,-35,-12,-16,-37,-29,33,-20,2,-102,-1,-7,-5,-77,-79,38,25,-33,-28,-3,17,-106,-89,8,-18,-34,-115,-45,-44,-16,-75, -13,19,14,-67,-53,-63,2,-7,-64,-36,9,-1,-19,-51,-40,-29,43,15,-14,11,31,-57,-21,-55,10,41,14,-23,-20,-102,-16,-73, -11,-55,38,10,-37,-76,-57,-16,-58,20,-88,-23,-35,-53,18,-33,12,64,-31,-44,4,-6,-30,-48,-99,-9,14,-42,-18,-49,-28,-17, 
  /* [10][1][][] */ 2,-15,-50,17,44,-56,55,-36,39,7,22,2,-25,-16,17,13,19,14,-29,-7,-14,47,-5,12,53,11,28,13,-61,42,11,-38, 17,-3,-28,-1,46,-37,-40,21,26,35,39,-3,-21,40,42,31,50,-2,9,78,86,-2,18,-7,-33,-26,12,5,-28,75,-54,-42, 7,-68,-34,13,7,-37,-78,-44,-60,25,-48,-55,23,-51,-62,0,-11,24,-57,-30,1,-26,-46,-33,-81,18,-17,-127,28,-55,-1,4, 
  /* [10][2][][] */ -27,-3,-13,46,-18,-32,4,21,30,-22,38,-32,-1,22,3,35,-67,-42,43,-32,-38,32,38,6,91,-57,41,-10,-48,48,27,-24, -21,-25,-40,-7,16,-58,69,-14,-27,2,7,-49,-2,58,100,20,-52,35,59,38,44,-11,89,18,101,6,17,44,45,57,5,-51, -33,-33,10,37,-28,2,-28,-22,-31,58,-82,20,46,8,-18,4,-30,-36,46,32,-37,-48,-60,29,6,68,35,-40,-30,-107,-6,6, 
  /* [11][0][][] */ 83,-15,-12,-51,-40,28,-42,-18,-14,27,-83,26,-6,25,-46,20,7,-12,-12,-41,23,4,-71,13,-84,34,-33,11,4,4,-20,54, -10,0,15,13,49,22,30,-27,9,-2,6,-11,22,28,18,27,-8,-59,-33,22,-30,36,18,60,58,2,24,-6,7,44,6,-28, -17,-27,-17,-5,13,-8,40,-63,40,-25,30,6,-24,6,-58,-12,-109,17,30,-6,-51,48,3,36,-11,-42,17,61,-43,35,11,9, 
  /* [11][1][][] */ 41,63,11,13,-34,-51,-37,-14,10,21,-34,16,-68,12,37,-25,43,17,-29,-36,20,-9,9,32,-28,24,-30,3,20,-7,-50,70, 18,25,-84,-35,45,23,18,46,-10,-22,-5,64,-10,-7,32,19,-15,16,-64,-28,-101,65,-33,15,12,-9,-30,-36,-50,56,29,70, 32,-12,-54,36,15,-54,96,15,4,-14,27,-13,-11,-21,-8,20,-33,-18,22,-18,23,65,21,-12,40,-45,-20,19,-37,50,11,-1, 
  /* [11][2][][] */ -3,62,29,48,10,21,53,-60,36,8,7,30,14,-1,84,66,5,46,-24,34,20,-35,2,79,35,0,-11,29,12,17,-15,-16, -15,52,-9,7,-17,18,11,16,3,12,-16,41,42,-10,9,17,-19,-11,-33,-7,-44,45,2,33,-3,45,-10,-58,5,-19,22,59, 10,-49,20,-48,-84,12,-37,16,-80,-6,-86,-15,18,-21,-88,-102,-26,5,-26,-25,-7,-32,-127,-72,-32,-35,-15,-36,-34,-40,-91,-3, 
  /* [12][0][][] */ 63,24,52,-18,-23,28,-17,0,-7,12,-49,71,-23,4,6,-65,10,-4,-56,-39,-10,32,-45,-48,-55,-10,-4,3,32,-9,6,29, -1,13,8,17,-43,6,-33,14,-55,-20,-59,14,8,31,-39,-35,-4,55,-70,-8,-4,-9,-117,-20,-65,24,-46,-19,-7,-127,-8,47, -42,-17,1,-29,-22,-9,2,11,-62,-10,-71,-26,34,-47,-72,-38,7,-23,-47,-35,-64,53,-100,3,29,41,-39,-53,-1,-57,25,-15, 
  /* [12][1][][] */ 30,3,-8,8,26,-48,17,-28,-25,18,-19,8,-33,-50,-32,-34,-2,4,-58,-3,37,9,-67,5,17,0,-25,-44,-8,-94,-54,9, 14,53,-8,32,43,-9,86,2,-6,-6,12,-10,-56,6,44,55,0,-36,-2,1,-12,4,-5,27,34,-54,-62,11,30,17,-11,-18, -42,-7,-58,19,-19,-32,4,17,28,16,-11,4,-42,-37,19,-13,5,-13,-20,52,-31,57,51,13,15,43,-31,5,-49,63,9,-11, 
  /* [12][2][][] */ 35,4,17,-11,-33,25,-38,-16,11,42,-71,77,89,21,-26,-31,10,-8,-17,65,-1,-25,-77,46,26,36,-46,-44,6,-21,-1,28, 31,41,53,34,26,-9,75,-77,38,-29,10,4,61,5,35,0,-37,-11,-9,-2,42,78,-16,76,89,-4,25,-21,-24,82,7,24, -6,-8,-68,45,11,-5,79,-14,42,-34,58,-22,30,39,-22,50,-24,-29,45,17,-23,50,48,24,39,-52,26,88,10,67,42,40, 
  /* [13][0][][] */ -17,-45,2,-49,-39,-42,-61,4,-68,-12,-127,-25,-38,-88,-20,-55,26,0,-23,-53,30,-9,-89,-29,-29,41,-41,-70,-10,-53,-13,16, -5,-1,12,27,22,8,-13,9,30,-6,-26,-29,22,-9,-15,33,-14,-10,16,-25,-30,49,-4,43,75,18,-60,-3,16,-22,15,-42, -41,24,-4,17,5,2,6,36,26,-13,28,-15,9,38,1,5,-2,-37,41,21,-36,0,-4,-16,32,10,87,61,22,1,29,-22, 
  /* [13][1][][] */ -13,-44,-8,3,33,-76,3,-46,20,9,-11,-44,-25,-41,-3,-13,-5,18,-39,11,38,23,22,-39,27,23,-2,-15,2,7,16,-28, 18,-9,-19,48,44,8,-7,-20,30,-3,7,-15,-44,0,55,-10,-6,15,-5,21,1,-13,30,9,17,-8,19,-10,-38,72,-13,-47, 12,3,22,-19,16,0,23,-12,9,14,32,-2,-2,-9,-6,-49,-12,-14,17,-15,25,8,2,9,14,-10,31,56,8,23,-6,-3, 
  /* [13][2][][] */ -30,-4,-25,25,21,-22,25,2,45,0,43,15,36,9,-55,4,-51,11,0,-11,-30,71,13,33,-3,-41,38,32,-23,22,76,-15, 9,-13,-38,1,25,-18,9,10,8,20,70,-5,-12,53,51,37,-27,25,36,91,19,-21,46,-3,74,-34,72,28,-14,36,6,-17, 43,-25,-11,-12,18,-22,-33,20,-19,-4,-1,4,17,-20,-73,-46,2,22,-74,-22,36,-24,-35,12,5,14,-85,-23,-7,12,-8,-5, 
  /* [14][0][][] */ 8,20,-22,-53,-81,13,-76,36,27,15,-115,73,14,-69,-47,-28,10,-19,-47,7,-13,23,-53,-65,-36,20,-16,-55,-15,-16,-56,69, -17,-17,-25,6,27,17,25,33,29,19,-18,50,13,55,-57,-51,-2,-39,-127,-24,-78,25,-67,25,-61,-40,-46,-62,-41,-83,2,57, -38,-54,-4,-67,-91,-29,-40,68,-81,-7,-118,-22,65,3,-103,52,-3,48,-74,-67,46,-12,-123,-108,58,2,-8,-89,15,-70,64,-44, 
  /* [14][1][][] */ 11,16,4,37,-36,12,-27,-7,-46,19,-66,6,-66,45,-37,33,2,5,-83,-26,-6,-24,1,65,15,22,-72,-106,-17,-1,-3,-21, -12,19,-70,-46,-3,-45,53,38,47,28,9,16,-53,-16,33,50,1,-9,18,-40,-37,27,-16,16,-6,-76,-98,-6,-4,8,47,25, 23,-4,-17,-2,45,-64,-11,-83,19,-7,-40,-16,-39,-41,52,2,6,5,-1,48,30,16,63,-36,73,51,-47,4,49,14,-1,-53, 
  /* [14][2][][] */ -23,55,42,60,14,13,-18,-11,2,3,-61,25,63,8,-41,14,7,28,-14,37,87,-44,-57,69,-53,49,-11,-28,13,-77,-68,-65, -36,20,-24,-47,43,-18,17,-73,10,-22,42,-5,40,-17,-9,48,-58,-7,1,14,18,57,-46,15,62,19,13,-36,-23,85,20,56, 8,40,-34,82,62,2,51,18,12,-39,63,-45,10,-3,43,68,2,-26,-16,-19,-44,107,49,14,70,-37,-1,118,-31,109,59,19, 
  /* [15][0][][] */ -36,-21,-71,-50,-78,23,-65,19,-32,29,39,-20,44,-3,-16,-95,-31,-70,33,42,-31,54,-115,-9,-77,-17,100,7,-63,-74,-27,47, -8,-38,66,-4,-104,41,-22,-17,-54,-9,-4,45,48,31,31,48,12,49,-5,-45,66,4,-72,-60,-32,12,22,-16,34,12,10,49, 45,11,31,-38,-55,23,-4,-41,-60,19,-20,36,-8,8,6,21,10,-20,-45,33,61,-27,-42,-23,-38,-17,-4,14,15,31,-27,4, 
  /* [15][1][][] */ 13,-74,-60,-14,-14,14,-57,71,-8,22,25,-21,-8,-7,6,-29,-1,34,44,64,39,-50,25,-41,-43,4,38,5,-2,-4,11,0, 23,-37,16,-27,-49,11,-19,41,-16,12,-43,24,0,-4,-1,-70,-24,-22,-18,19,6,-36,-56,-40,-54,-3,9,-44,19,-22,10,1, -13,-19,-37,3,-12,-28,-26,-6,-42,-5,-67,35,5,30,-32,-24,37,24,-23,2,-49,-39,-14,19,-63,32,-25,-120,65,-46,-63,13, 
  /* [15][2][][] */ 11,-77,-6,-57,-111,-27,-112,41,-56,-26,-6,13,-53,-69,-46,-5,6,50,-12,27,33,-10,22,-57,-81,22,-35,-54,-13,-14,5,-37, 12,-4,-23,6,-79,47,-38,-32,-54,24,-48,2,-72,5,-30,-3,40,21,-89,-17,-21,-30,6,-27,-51,-63,-64,-80,-34,-45,-127,-6, 49,31,5,-36,-88,-2,-13,49,-56,29,-59,28,-1,10,34,-14,-8,73,-19,5,-16,6,-3,23,-60,1,-37,-105,21,-54,-19,12, 
  /* [16][0][][] */ 1,-86,-14,-12,-66,-51,-37,18,-32,-5,-53,-21,5,-23,-65,-74,4,5,-45,15,-46,-3,-50,-64,30,4,-79,-32,-29,5,-24,-29, -43,-39,-1,-22,-10,-2,-10,26,-14,-9,-14,-17,-31,-67,-42,-25,29,-49,-15,37,-26,-12,4,6,-8,30,6,-23,29,5,6,5, 18,4,-1,57,69,-32,55,17,82,16,59,-31,-38,14,35,20,19,18,18,61,60,-27,97,36,92,-23,0,65,5,41,37,-46, 
  /* [16][1][][] */ 13,41,-2,-23,8,-37,-36,-8,15,-21,-32,-7,-3,23,28,-15,29,-1,-44,-1,-46,-14,-31,13,-46,-4,-8,-16,-7,5,-18,49, -40,-29,49,-54,-63,31,-65,-7,-42,3,-40,-21,2,-10,-50,0,24,40,-11,3,44,39,-97,-35,-42,42,-12,-29,-29,5,-22,-17, 25,-27,66,4,-4,43,-51,-11,-19,26,-58,10,30,-3,-39,-49,5,20,-2,65,19,-39,2,7,10,5,-29,-75,-21,-46,-4,-21, 
  /* [16][2][][] */ -1,47,-30,36,57,-34,49,18,80,-23,46,-33,-32,11,127,44,-12,13,12,6,-18,31,54,38,97,-40,37,51,-16,87,53,-3, 9,-38,12,-58,-17,-40,-2,9,-64,21,-39,8,29,42,-10,-32,-17,-22,23,-36,5,-35,-34,-45,11,40,-14,-40,13,-8,26,-17, -22,-34,5,-38,8,9,-12,-6,-22,17,-28,5,14,-13,-13,-16,36,29,5,-17,-33,25,-90,74,-91,13,-57,-47,0,-60,-1,9, 
  /* [17][0][][] */ -16,-31,34,-36,-6,-21,-29,5,-49,0,-75,20,18,-21,-78,-79,15,53,-9,-52,24,-33,-116,-33,-66,7,-36,-55,-22,-45,-4,-10, 9,53,31,-13,36,-15,48,-51,39,11,-6,-48,-20,-17,-14,20,27,-12,-17,27,-9,-12,21,30,29,48,14,-34,24,-22,15,-36, 16,-7,-51,20,71,45,52,-12,74,-9,22,5,-61,-1,18,55,-35,-25,46,40,26,21,56,41,39,-57,-21,41,-33,29,25,-49, 
  /* [17][1][][] */ -32,56,-33,65,41,-26,26,-16,55,3,-8,15,-57,-31,20,22,-7,4,-51,25,30,42,39,43,62,39,9,-25,19,55,17,-23, 5,3,-32,9,71,-2,54,-7,2,10,-8,-31,-73,36,62,5,-10,-18,-5,68,5,-21,67,9,99,-46,4,48,-81,127,10,-42, -29,-26,-45,14,-51,-58,-5,15,-17,9,-44,-10,14,-32,-1,-39,-15,20,15,20,-40,-37,-38,-6,-22,-17,-56,-47,-21,3,38,12, 
  /* [17][2][][] */ -13,6,15,86,36,-12,84,-38,70,-50,51,-15,54,16,56,51,-58,16,-9,7,-9,30,20,74,69,-21,40,34,-4,46,20,33, -18,-54,-55,-28,-25,-39,-51,-12,-69,30,-41,14,36,-17,24,-77,-51,-30,-39,5,-8,-16,-30,-14,23,21,3,-9,-41,-3,-62,-9, -3,-43,27,-56,-16,-4,-91,13,-83,5,-99,-5,-11,-20,-109,-56,-4,10,-61,-9,42,-41,-68,-51,-74,8,-46,-110,-28,-84,-70,-14, 
  /* [18][0][][] */ -23,-11,44,-16,8,-3,50,1,0,-13,-11,18,-20,-4,-16,4,-29,-18,-16,-30,12,27,-45,32,3,42,2,0,11,-12,4,1, -17,28,-35,59,67,-35,54,-1,74,-14,37,-11,-40,29,60,70,-16,-29,31,1,-21,16,62,12,96,-24,16,27,-14,31,49,-55, -7,28,-29,-12,65,-14,10,12,3,3,42,-18,-5,42,14,-1,-21,-6,34,49,40,-15,51,17,70,24,20,24,-22,81,44,-20, 
  /* [18][1][][] */ 20,-55,5,-65,-30,-3,-73,-31,-32,12,-55,-7,-24,-63,-51,-65,-13,10,-56,-22,20,26,-64,-1,-4,26,-5,-59,-45,-35,-22,12, -2,-17,-25,2,12,1,5,-32,18,16,-47,-2,-18,-17,16,-39,-45,-11,-37,-1,-12,-9,-3,22,34,-21,-18,3,-39,27,16,15, -23,5,-57,28,55,-41,78,43,15,-37,35,-36,-31,15,72,10,-30,-24,54,8,16,18,73,0,127,-30,28,92,-31,33,41,2, 
  /* [18][2][][] */ 21,-45,20,-76,-55,-23,-81,40,-78,31,-83,-5,25,-37,-75,-2,20,7,-22,2,5,-6,-64,-20,-84,5,18,-63,-3,-45,-10,26, -27,-19,18,-57,-49,-17,-73,-26,-36,14,-83,8,18,-48,-13,-79,10,-2,-22,-14,-14,-39,-100,-27,-53,35,-55,-59,-32,-43,-25,58, -16,11,27,-82,-13,26,-41,31,-60,41,-60,0,10,-25,-55,-73,3,-18,5,-13,17,-3,-74,-32,-45,17,-44,-30,-1,-43,-33,-6, 
  /* [19][0][][] */ -7,45,61,30,-5,50,-9,31,-52,9,-66,-3,-16,2,-5,-31,7,-8,-71,16,-57,20,-63,16,12,-1,-6,-13,-57,-99,-6,27, 8,15,-15,-51,-83,3,-41,15,-52,34,-102,10,-41,-46,-20,-90,16,-6,-75,-7,0,-2,-96,-58,-24,-7,-42,-81,-92,-95,-21,-15, 27,10,10,-25,-44,-53,-36,25,-80,20,-62,-4,-32,-60,-87,-32,0,0,-34,-60,-12,-28,-83,-27,-4,-11,-50,-37,-73,-78,-24,16, 
  /* [19][1][][] */ 9,-52,-62,-27,-16,-36,-13,19,-1,-22,-26,-13,-2,-47,-77,-43,-26,3,-39,2,33,10,-36,-24,-29,30,-33,-59,-25,-55,11,51, -37,34,-34,21,48,-41,17,-98,27,-5,6,-8,-71,35,22,19,1,-42,-55,-15,-21,3,-10,8,64,-53,-46,23,-58,28,-43,-47, 24,34,-47,23,39,-53,-40,-30,4,45,15,-31,-67,43,25,-10,-12,-30,0,54,9,-13,13,29,3,-34,-26,-19,-35,29,15,-37, 
  /* [19][2][][] */ 46,-56,12,0,6,27,-6,8,-32,14,-35,43,-42,-18,-43,-27,-24,17,-40,-51,-15,72,-63,-4,17,37,-62,-60,-54,-55,9,67, -14,15,-68,52,36,-29,91,-31,57,-52,37,8,22,-5,63,50,-18,4,11,-23,-42,40,26,-13,88,-75,-17,58,-66,103,33,12, 21,-18,-55,23,17,-4,62,10,-8,-36,81,8,25,32,121,23,-11,-57,34,74,30,12,79,4,127,24,80,103,-26,60,65,-25, 
  /* [20][0][][] */ 17,42,1,-20,-75,-39,-93,14,-24,4,-98,-15,15,-22,-73,-71,-16,21,-48,14,11,-21,-76,3,-37,22,-18,-57,-87,-44,-48,-5, 3,3,69,-61,-20,-25,-26,-11,-100,-6,-65,-39,-8,-31,-56,-24,32,15,-20,-28,-4,1,-53,13,-3,17,-14,-34,-26,-30,-15,-71, 17,27,-15,-28,-12,-36,-71,-16,-34,27,-46,-20,-11,-28,-21,-25,-15,39,-49,-24,10,-44,-1,4,16,26,28,-38,-26,6,-6,-29, 
  /* [20][1][][] */ -31,41,-25,17,56,-40,28,-65,43,-37,-7,-16,-84,-12,96,26,18,-22,11,46,-31,27,14,38,47,7,-6,-29,-59,38,-7,-41, 6,-14,-29,6,32,-14,-54,-36,-33,5,-2,-45,-45,21,7,-62,-20,-17,-1,36,23,-35,-29,41,-25,-28,11,-48,-83,28,-52,-34, -9,-65,-1,-52,-4,-5,-37,-1,-57,7,-114,19,-1,-23,-78,-61,-19,18,-37,-53,-12,-48,-68,-56,-23,53,-33,-50,-52,-56,6,21, 
  /* [20][2][][] */ -6,30,-2,74,35,-37,101,-102,50,-1,83,-10,-5,35,104,78,-67,-13,43,14,-36,45,61,54,58,-15,81,11,-55,127,60,25, 0,-1,-49,59,55,-32,53,-4,1,-16,80,-4,-2,33,53,-25,-20,-16,-25,31,3,-20,17,30,100,-1,25,13,-47,32,-24,-13, 21,-1,-9,-66,-63,-23,-50,-13,-53,38,-91,10,38,-27,-53,-107,-10,34,-19,-69,16,-29,-43,1,-58,31,-3,-96,-15,-81,-26,-1, 
  /* [21][0][][] */ 38,33,21,-3,-48,57,-6,-7,13,16,6,48,12,-20,0,10,4,-18,-11,-21,61,2,-52,13,8,27,-18,1,32,30,2,48, 27,1,74,35,-38,-7,-16,10,-19,-22,-127,55,-4,-17,2,-47,22,8,-25,29,-48,33,-94,72,-46,-9,-18,-78,-15,-82,2,59, -44,-29,-58,-44,-54,-25,-53,36,-113,5,-79,-27,2,-77,-60,-114,10,-4,-13,20,-12,2,-115,-90,-26,-26,-46,-83,-27,-57,1,-18, 
  /* [21][1][][] */ 68,-43,44,18,45,-16,-16,3,-31,53,-69,50,-38,-7,0,-50,-19,51,-46,-14,51,41,-87,11,-48,58,-43,-55,1,-20,9,-19, -13,51,-4,55,55,37,84,1,34,-5,22,13,-37,41,40,54,12,-10,-37,25,-2,5,67,63,25,-2,-62,16,5,61,0,36, -28,-35,-75,28,28,-46,-49,32,45,-7,10,-1,-52,-27,-5,22,-43,-4,-34,48,25,-6,29,-21,60,-14,-38,-18,-77,2,-30,-42, 
  /* [21][2][][] */ 53,67,88,16,-36,-11,-32,-42,-42,43,-69,50,14,-18,-41,-46,5,34,-57,-19,61,-12,-106,-4,-3,49,-35,-53,-10,-14,22,80, 21,60,-65,-10,64,3,25,2,59,-40,11,50,25,-9,77,57,-42,23,-32,-3,-32,40,20,31,78,-11,-16,-55,-48,40,60,73, -26,2,-95,65,25,-39,86,2,59,-27,101,3,20,31,-92,37,-69,-41,33,49,-66,71,31,4,20,-76,26,97,-75,12,55,36, 
  /* [22][0][][] */ 41,-26,35,-20,-12,-28,-57,-68,-22,57,-98,-5,-12,-19,-96,-30,-6,40,-69,-73,72,8,-86,6,3,6,-68,-19,-33,-52,-27,32, 34,78,8,5,-23,-1,30,85,66,-9,18,-41,19,10,22,61,-41,-25,36,-26,-54,27,78,61,48,46,-11,54,20,-8,2,-3, -70,-10,-10,-34,-24,6,28,-7,-19,1,6,-25,40,25,-40,-21,14,-58,46,-6,-71,0,30,-35,0,-29,9,18,-10,3,28,-38, 
  /* [22][1][][] */ 2,25,22,42,50,-27,39,-25,8,-31,37,3,2,5,23,-30,-19,12,35,36,-22,49,14,37,12,23,2,-13,-4,23,33,-36, -6,3,-32,76,9,-24,32,-20,26,-23,41,-3,-28,28,127,-12,-12,-3,37,19,-17,-31,61,11,80,-25,64,-3,-35,97,26,48, 9,28,-49,-23,-10,-17,22,19,7,14,18,-1,-1,15,-8,-17,-7,-6,14,-12,6,-1,-44,-16,38,-41,-20,8,-18,21,-20,42, 
  /* [22][2][][] */ -65,-57,33,27,40,19,18,-17,-6,6,-6,-37,34,25,-86,12,12,4,-6,-5,-34,26,20,2,-19,44,-8,24,-27,1,35,15, 7,-61,-10,-26,-30,-9,-44,-19,-53,34,-38,22,-25,-28,-10,-31,12,38,0,36,-24,-76,-7,-20,-27,-44,-53,-80,-16,7,-39,-37, 34,-27,14,-73,-54,-2,-37,5,-44,41,-56,-2,-14,-40,-73,-70,0,12,-14,-32,17,-41,-74,-40,-42,17,-33,-42,-46,-26,-29,-3, 
  /* [23][0][][] */ 22,-16,-14,40,36,-21,-24,-3,3,-17,-41,-7,35,-10,-16,3,1,-2,-25,26,-22,-29,18,46,-30,26,-42,-24,-9,8,-30,14, -26,-6,-23,44,25,8,51,51,18,9,-13,49,-10,-5,-44,31,-10,-27,-91,-37,-59,70,-4,58,41,22,-37,-29,35,-47,10,-6, -17,9,-26,64,32,-51,40,39,56,-14,0,-77,20,39,29,46,1,45,35,31,-5,-73,61,-24,25,4,10,8,48,67,71,-43, 
  /* [23][1][][] */ 0,64,6,62,17,-7,36,-33,32,-22,22,-44,-27,27,92,47,30,-40,4,9,6,10,34,28,103,4,8,-42,-34,127,50,-19, 17,26,-77,-39,8,-24,-26,4,-12,-6,-5,-9,-9,-20,5,13,-17,4,-49,-11,-43,-17,-53,21,-34,21,-1,-37,-4,-51,0,54, 3,-23,-17,-37,-39,-35,-60,-47,-17,0,-43,-28,0,-16,43,-41,4,16,-34,9,3,-37,20,16,-5,32,13,-98,3,15,2,-6, 
  /* [23][2][][] */ -7,5,44,38,37,24,69,-109,38,-14,16,10,37,9,50,28,-73,7,22,23,38,-14,-4,21,-16,18,27,18,-4,66,3,-13, -17,-13,30,1,26,-37,22,-24,10,-20,28,33,20,12,-71,-29,-69,-38,-15,40,22,-11,9,31,-15,-8,-10,9,-6,14,-49,-11, 29,-47,53,-13,-61,35,-58,17,-65,-8,-87,-1,-38,-3,-52,-88,-46,-1,-12,7,11,16,-91,-24,-86,17,-22,-94,-21,-26,-24,15, 
  /* [24][0][][] */ -3,-101,-16,-57,-50,-44,-15,-56,-83,7,-40,-16,2,-27,-82,-64,-47,-49,-101,27,-5,-22,-67,-16,47,-7,-127,-67,-14,38,-75,-97, 33,-70,-45,30,-51,-59,-27,-25,-19,-33,32,-29,-104,-78,-72,-62,-21,10,13,2,23,-6,15,-27,-12,7,7,20,-56,-11,-5,-17, -4,18,-15,42,65,-60,15,-13,74,51,45,-34,-80,21,7,49,-49,11,-17,63,97,-36,40,-34,79,-26,-3,44,-72,57,-4,-48, 
  /* [24][1][][] */ -41,-21,7,-112,-71,20,-21,69,-46,-84,20,-11,93,57,-4,-18,46,-73,28,11,-35,70,-41,-23,-95,-53,23,42,13,22,46,11, -36,15,82,-36,-99,-6,-36,-44,-7,-38,-116,9,83,-45,-31,-19,27,-31,3,6,35,-3,-95,-51,-54,25,19,-2,-18,-24,16,22, -41,-26,22,0,7,54,28,-1,45,34,-7,28,-14,70,-56,27,53,-16,24,49,35,18,-32,21,28,37,-25,14,38,-42,-82,-28, 
  /* [24][2][][] */ 40,44,-93,49,73,3,59,109,39,35,92,31,-33,-6,66,62,24,-41,30,12,-19,88,126,49,92,21,103,65,42,46,57,88, 20,24,-35,-64,10,-55,-43,-4,-8,12,-54,-3,-6,20,-36,16,82,33,29,-67,-28,27,-7,-3,-65,19,-14,-35,33,-3,12,7, -3,-50,-54,44,3,-4,-31,-25,79,-29,38,25,45,9,-17,-53,-42,-5,-9,-42,18,3,-17,-5,-69,-81,-105,42,-44,-54,3,44, 
  /* [25][0][][] */ 2,-28,59,-46,-51,39,-33,30,-39,4,-6,7,21,-28,-53,-11,11,4,25,-27,34,53,-60,-3,-60,48,77,25,-2,-32,23,7, 10,-41,-38,-58,-34,39,-53,-60,-15,-28,24,-10,-30,-16,-3,-26,-13,-39,40,31,-45,-75,-40,-48,-75,-42,45,6,41,-66,7,23, 1,16,60,-7,-58,55,-45,15,-22,21,-15,68,-34,10,32,0,-20,-16,8,7,34,-24,-94,-60,-56,-35,11,6,7,3,-50,43, 
  /* [25][1][][] */ -21,-23,-5,-31,-71,40,-34,46,26,9,3,-8,41,-27,-31,-4,2,-49,23,8,-15,-65,-72,-36,-106,-10,36,8,36,-49,25,58, 16,-26,-9,-54,-64,50,-56,-33,-11,4,34,-26,-47,23,-9,36,-4,-1,50,-10,39,-67,-13,-111,-90,-66,16,69,16,28,-40,-2, 20,-4,-28,16,22,-6,-39,-36,-13,18,-11,23,34,0,-20,-17,22,-21,0,-26,33,-78,-5,-13,-37,-24,-25,1,-40,-51,21,-62, 
  /* [25][2][][] */ -4,-64,-62,15,-12,6,-29,3,6,-13,0,53,-1,-43,-18,18,8,-28,20,5,-6,-70,48,-64,-50,-25,-5,20,-10,-3,6,-19, 26,-29,-8,-39,-60,17,-62,37,-58,31,2,52,-92,-10,-127,14,-25,39,-31,-4,32,-12,2,-35,-18,0,-44,-5,25,-3,5,-12, 6,45,16,48,-3,78,17,-1,-3,41,-26,60,-48,36,-45,14,30,-19,3,3,-10,51,-33,72,-56,43,-91,-35,40,-98,-30,28, 
  /* [26][0][][] */ -11,-24,8,-13,-20,5,-39,-15,-87,-17,-66,8,0,-42,-55,-38,55,-8,-61,3,-41,1,-127,-31,-17,44,10,-74,1,-85,-37,43, 6,20,21,-15,-16,-49,-21,9,-51,20,-42,2,-4,-33,12,-26,-11,7,-35,5,25,-31,-83,-40,-19,6,-35,-28,-60,-71,25,20, 0,18,-2,-16,-52,-21,-33,36,-80,3,-96,-43,23,4,-56,-56,-3,13,-29,-21,-27,8,-47,-20,-52,34,-9,-80,-16,-101,10,-14, 
  /* [26][1][][] */ 20,-24,-4,-43,-36,-23,6,23,-30,-9,-58,-8,15,-27,-69,-14,13,12,-49,16,16,-8,-71,-12,-4,58,-40,-55,0,-65,-15,-24, -25,59,19,34,93,-39,75,-26,38,13,59,-52,-74,49,55,72,-12,-29,-10,39,20,-7,77,40,88,-21,-45,50,-18,52,-19,-53, -3,-16,-43,20,13,-38,2,-9,-46,32,-42,20,-10,19,-8,0,2,30,-9,52,-14,-6,-19,-2,-13,-10,-39,-48,-8,-5,18,18, 
  /* [26][2][][] */ 22,5,46,-1,8,-3,-4,-47,-30,12,-44,-22,13,-35,-65,-15,-51,20,-40,-35,21,24,-18,13,3,25,-28,-58,-43,-60,33,-10, -9,-3,-37,45,61,-39,71,-3,17,-11,52,3,1,23,110,39,-40,11,38,47,-35,13,35,28,89,-29,71,87,2,93,34,-15, -11,-25,-41,18,16,-41,5,-7,-21,6,31,-29,-10,32,25,7,23,-14,2,3,2,4,-22,0,3,-8,-17,33,10,42,38,27, 
  /* [27][0][][] */ -17,30,-14,4,39,-27,-12,-44,7,-22,50,-38,-35,-16,24,13,-8,4,-35,-11,-17,29,38,-8,36,15,-22,1,-3,34,31,-11, 14,26,-12,14,32,-22,-24,-27,-13,48,50,-8,-21,34,37,-10,-10,0,-18,67,10,-47,-3,36,35,-39,51,28,-39,24,11,-51, 53,-19,41,-83,-11,-18,-62,6,-27,9,-26,23,12,-27,-110,-76,2,55,-17,-25,48,-46,-35,-12,-65,23,-23,-71,-41,-66,-10,-25, 
  /* [27][1][][] */ -46,16,-6,58,91,-28,99,-1,23,-25,56,-30,-35,-16,55,61,-54,-18,33,9,8,71,85,49,77,5,68,36,-28,117,68,-66, -32,-46,-56,26,-12,-22,36,8,-25,-1,-3,14,-25,25,69,-7,-29,11,3,54,-11,-6,59,30,89,-45,35,48,-31,39,4,-8, 36,-42,-12,-26,-16,-5,-40,-19,-78,-9,-76,2,19,0,-127,-55,-21,2,-59,-43,24,-18,-59,-23,-57,-7,-17,-80,-22,-76,23,-40, 
  /* [27][2][][] */ 24,17,43,-22,2,-17,-5,38,-53,-5,-35,45,37,-44,-19,-30,-28,22,-36,-1,14,-24,-60,-25,15,18,25,-28,8,43,-51,6, 46,-41,-3,-64,-47,1,-73,-10,-32,41,-55,40,16,-8,-15,-56,-27,12,-22,-33,-37,-8,-55,-38,-12,16,-49,-7,5,-58,-43,-26, 3,-33,-27,19,1,-30,-15,17,-50,-30,-16,-41,-2,-37,-69,-13,16,27,-10,-36,24,-1,-21,1,-5,23,12,-32,-18,-66,-12,-58, 
  /* [28][0][][] */ 26,-36,-43,-53,-11,-52,-69,43,-73,29,-69,-3,-4,24,-91,-38,1,18,-71,-26,24,5,-67,-53,-9,2,-127,-95,-36,-84,-16,-24, -10,-47,-45,-69,-41,-31,-36,-10,-9,-4,14,-14,-80,-35,-14,-111,-3,-18,-33,63,-3,-36,-41,-53,-10,26,49,-12,-21,-44,-48,-23, 26,-22,-21,-10,-7,29,-23,2,28,43,0,2,-27,-16,33,-24,-37,25,17,-20,-2,-9,-29,-17,-42,-26,4,-21,9,9,-24,35, 
  /* [28][1][][] */ -19,28,43,9,5,1,-25,-15,-40,-15,14,8,105,1,60,-5,-8,6,-15,48,-9,-16,10,11,-22,0,4,22,22,-47,-15,48, 1,-79,8,-7,-2,23,-83,20,-22,13,36,-11,-36,-31,-73,-20,2,21,-4,26,21,-27,-18,-56,-16,-32,37,16,2,60,-33,-5, -25,-26,18,23,40,50,-13,-13,-33,-13,16,10,-2,-18,-35,-33,34,15,-57,19,25,9,-30,17,-1,37,-70,-37,2,-83,-10,25, 
  /* [28][2][][] */ -4,56,-65,76,81,-31,104,99,43,-53,65,-45,9,19,60,21,-50,-81,74,-23,-47,-17,60,30,97,-32,39,74,33,80,78,32, -13,-17,0,-51,-33,-43,50,-15,-25,-19,-26,-61,-21,45,1,37,-21,50,48,-29,16,-7,22,-13,34,4,-35,-2,19,11,0,-32, 13,-4,-4,38,-4,52,-50,53,-5,20,-73,25,38,57,-53,23,18,-4,39,35,-26,31,-22,67,-27,33,-87,-35,8,-72,20,-23, 
  /* [29][0][][] */ -40,67,-2,37,55,-15,37,3,47,-30,81,-8,42,54,-10,50,-78,-1,43,77,-37,93,119,76,118,40,73,39,2,100,35,-35, 22,-20,21,-6,11,-21,-20,-69,-7,24,15,0,8,23,56,-19,-46,-20,16,2,-3,-31,9,-45,-34,-32,60,12,-51,-8,-9,-10, 57,5,42,-88,-35,36,-96,17,-87,23,-23,-27,-16,2,-111,-71,-34,11,67,-71,109,-4,-50,-10,-19,52,-62,-50,2,34,-53,-19, 
  /* [29][1][][] */ -55,-7,-22,19,59,-2,38,2,37,-39,63,-44,-100,-34,43,11,-111,-10,23,33,-11,12,52,13,84,-64,59,73,-42,127,68,-4, 24,-66,-56,-28,22,-71,56,28,-15,-22,-18,-12,-41,-4,110,-27,-17,14,49,23,-35,-9,51,-38,89,-47,29,54,-32,48,-35,22, 70,-36,-16,-69,-24,-14,-3,19,-55,13,-55,-8,63,-2,-111,-69,-77,13,-31,-96,53,-15,-88,-72,-89,49,-49,-61,23,-76,8,23, 
  /* [29][2][][] */ 37,22,68,-98,-19,11,-106,12,-86,58,-76,30,35,26,-27,-42,33,20,-23,-5,48,-113,-108,-6,-68,49,101,-98,28,-49,-27,23, 51,-36,-17,-117,-61,41,-81,30,-60,45,-70,9,25,-57,-37,-104,-55,-16,-56,9,-1,-31,-63,-67,-59,2,-108,-98,21,-60,-5,18, 33,-53,-5,-19,-75,-34,-26,28,-59,32,-41,-27,-39,-27,-68,-71,37,0,8,-64,-28,-33,-54,-62,-11,-9,-7,-77,16,-97,-1,-43, 
  /* [30][0][][] */ -6,-41,2,-75,-25,-10,-71,-5,-66,19,-66,24,-32,-44,-71,-80,43,53,-38,31,-17,-33,-77,-52,-22,0,-27,-92,-79,-29,-37,-39, -9,9,-38,-32,28,0,16,-32,-39,4,-52,-51,-52,-81,-37,46,33,-6,-59,-13,-9,-12,-7,25,57,15,-33,0,-36,-52,2,-11, -3,26,6,53,60,-4,41,43,84,-10,52,-14,-66,29,8,85,15,4,54,62,4,45,127,60,88,0,-4,47,-52,11,101,-41, 
  /* [30][1][][] */ -31,-2,-39,21,48,-40,13,-45,-18,-13,-43,10,-33,-20,22,51,27,0,-67,3,-18,60,-19,21,-2,18,-43,-12,-39,38,55,11, -2,59,-54,0,91,-16,31,-57,-11,35,42,-11,-36,-5,6,24,-13,-41,6,13,10,12,6,65,33,-67,-24,15,-94,77,-9,-61, -4,-57,-50,-12,-26,-54,-20,-26,-64,7,-95,-11,3,16,14,-65,-31,55,36,12,-16,-74,-31,-52,2,34,-73,-62,-74,-14,-7,-33, 
  /* [30][2][][] */ -37,45,34,72,91,-36,120,-25,61,-18,44,6,42,23,109,53,-68,16,34,37,5,67,58,98,117,16,45,59,-76,107,42,32, 21,0,-27,28,44,-5,12,-3,14,-1,18,-6,4,2,60,-17,-58,21,22,15,-3,11,14,25,63,-37,54,34,-41,54,6,-23, 30,-24,8,-66,-23,-33,-55,30,-62,38,-66,-6,57,-39,-76,-91,-9,-11,1,-12,-25,-2,-92,-3,-31,-22,-50,-118,-48,-55,-45,0, 
  /* [31][0][][] */ 24,-57,-58,-19,2,15,-46,-10,-23,7,15,-23,-15,-66,-11,-39,41,2,26,3,19,-60,-21,-79,-70,-6,26,1,-3,-25,-39,-48, 26,-51,-29,-7,-72,-38,-21,20,-56,-22,-19,1,23,-4,13,-64,-22,-3,-45,-56,10,-4,-85,-91,-61,-22,-60,-53,-48,19,-8,-22, 15,-24,-16,-30,-21,-28,-32,26,-44,3,-82,-11,-7,-35,-79,-37,6,-17,-63,6,-39,-11,-35,-19,-94,12,-1,-90,-19,-56,-65,20, 
  /* [31][1][][] */ -8,-68,-70,-52,-92,12,-40,36,-61,16,-30,-20,-54,-48,-39,-6,31,9,0,-11,12,-48,-5,-77,-8,8,-20,-23,12,6,32,-78, 4,-20,26,2,-77,15,-49,60,-52,2,-37,-3,-8,-46,-40,-4,32,-14,-79,8,-23,31,17,-31,9,-1,-10,-64,-16,-34,-24,-27, 18,32,-24,2,-28,-39,-70,72,-40,-1,-65,21,-42,18,44,16,33,14,-55,-6,-20,-14,-23,19,-54,5,-11,-127,31,-27,-10,-16, 
  /* [31][2][][] */ -13,-24,-6,18,41,-15,-10,22,-5,23,-13,-4,-10,31,-120,22,-37,13,33,-13,3,15,-66,2,-23,11,-93,-12,25,-12,-61,-30, 14,65,38,21,9,40,-54,24,-3,23,-7,5,-21,18,-4,18,-32,42,31,43,57,-7,-69,34,-52,39,-38,0,45,-69,-65,-46, 22,26,40,12,6,8,-63,-59,3,-31,-2,26,23,-18,-48,-32,14,31,44,0,40,-46,-57,25,-80,29,12,-29,25,-97,-4,-11, 
  /* [32][0][][] */ 0,-62,-65,-75,-28,-8,-28,67,-48,5,50,19,49,-79,-10,-64,25,-20,-22,21,12,-11,-45,-48,-70,28,38,-23,-25,-56,-26,4, 29,-1,0,-40,-52,-40,-38,-88,-27,23,8,-1,29,5,70,-75,-32,-13,-15,-40,41,-15,-110,-92,-56,-54,21,-41,-18,-24,-68,84, 22,-13,0,-105,-90,-28,-81,4,-111,-5,-42,8,-2,41,-79,-65,38,23,4,-46,17,-1,-68,-68,-108,-1,14,-71,0,41,-37,7, 
  /* [32][1][][] */ -10,-98,-19,-16,-28,34,-89,-2,-27,24,10,-32,-28,-36,-127,-8,9,24,28,19,-6,-17,-1,-63,-98,-9,0,-5,50,-27,-20,-29, 27,-33,-13,-3,-26,3,-104,-25,-73,-11,-25,22,-46,-51,43,-24,33,11,-68,-53,26,-77,-38,-61,-54,-34,-11,-83,-23,-6,-58,-20, 20,36,-10,-50,-50,4,-76,27,-92,-7,-95,22,-10,24,-2,-32,-15,20,-82,-40,-46,-60,-37,-24,-55,35,-16,-76,26,-66,-41,22, 
  /* [32][2][][] */ 36,-20,22,-33,-59,-33,-35,90,-67,21,2,53,29,-44,-117,12,18,13,43,-3,45,37,-20,-41,-55,20,-29,-22,-1,-33,-1,2, 41,28,0,3,-7,26,-68,-72,-13,47,-59,40,17,-26,-22,-23,-12,39,7,16,39,13,-48,-9,-51,33,-85,19,40,-97,-58,-52, 58,58,57,-8,-44,6,-80,-19,-54,-13,-111,-1,20,-24,6,-31,-32,23,20,12,25,-39,-62,45,-66,36,4,-92,50,-84,-39,-42, 
  /* [33][0][][] */ 17,-76,-23,53,-16,-11,4,-72,25,-25,-2,-41,-29,-53,25,54,-61,-2,-9,-38,32,-108,-74,-88,-63,-46,52,4,-43,0,-30,15, 5,-26,-17,-36,-61,50,-21,46,-33,41,23,71,-39,20,-98,-8,9,17,-8,24,-30,-28,44,-42,-13,-47,28,42,1,17,-62,3, 8,-34,-37,15,-10,24,-24,48,1,23,-23,63,11,-5,-73,15,60,-2,-34,4,-12,28,-42,-10,-31,36,-22,-48,-61,-29,9,45, 
  /* [33][1][][] */ 14,-47,-26,-10,-15,51,-72,55,-25,-19,7,-31,-24,-16,14,1,-15,-46,-44,-41,-17,-49,10,-62,-75,-24,-75,-40,34,-46,-10,-98, 7,35,47,-26,-49,-3,-34,-1,-38,14,-36,38,-55,-45,-66,32,-38,39,-2,-15,31,-2,-30,-9,-43,5,-33,-22,-11,-36,10,17, -37,-4,32,2,12,73,15,21,50,5,-13,36,-39,-3,-31,21,44,-4,20,25,26,33,-24,43,-26,57,-57,-3,28,-51,12,39, 
  /* [33][2][][] */ -3,-50,18,-6,1,32,-100,-15,-21,-9,-28,32,-50,14,-78,-11,-18,-5,-16,27,7,-28,-22,19,-44,-9,-95,17,14,-127,-100,-68, 20,42,39,43,15,-33,20,-66,-8,-19,-7,35,58,10,28,-25,-9,-30,10,5,18,-15,-74,72,-63,13,-4,-36,3,-74,-66,-6, -38,35,-7,8,-9,7,-35,29,-40,-52,11,-44,27,-39,-87,-35,-63,-29,-44,-33,-69,52,-29,-28,-9,31,2,-11,7,-88,33,11, 
  /* [34][0][][] */ 25,9,35,-52,43,-41,-36,-49,-32,23,-70,-9,-29,-22,-98,-63,-17,27,-63,-59,44,-6,-100,11,1,38,-16,-82,34,-26,-81,22, 23,81,-49,46,60,-18,78,-9,61,6,28,0,-27,54,66,97,-2,-16,12,22,-38,17,39,13,103,-36,4,44,-60,27,43,-83, -56,18,-29,42,23,-22,59,-71,-6,13,79,18,-14,3,25,41,-30,-16,32,32,10,0,70,-16,40,-24,21,63,-60,84,94,-4, 
  /* [34][1][][] */ 11,14,18,3,-41,-17,-47,-32,11,-15,-73,17,-21,-3,-45,-74,-18,45,-75,-26,16,18,-110,10,-63,19,-89,-34,-32,-58,-29,-25, 13,-5,-55,-4,50,-25,73,-27,41,-36,15,-7,-63,19,102,34,-19,-46,0,50,-24,27,33,34,127,-69,55,36,-91,101,61,-48, -1,0,-48,-34,-32,-25,25,41,-34,-40,12,-47,-14,3,55,-72,-13,-23,27,-36,-13,21,31,-24,86,-9,-2,36,-29,18,-7,38, 
  /* [34][2][][] */ -4,-4,8,-27,28,-30,-41,-19,-11,42,-9,2,41,40,4,21,57,36,-9,18,18,37,-41,-32,-50,-44,20,-8,-40,-25,7,22, 23,-18,-2,-63,-36,23,-1,8,-56,11,-125,22,-1,10,-31,-72,17,19,-35,16,-20,-45,-55,-58,-33,-18,-21,-23,-6,3,2,4, 28,-41,0,-93,-56,3,-90,48,-64,37,-83,11,-20,-18,-82,-67,-2,10,-34,-63,-15,-42,-86,-28,-41,-19,-83,-61,-25,-48,-4,12, 
  /* [35][0][][] */ 14,-50,12,-19,-28,-4,-14,30,28,5,28,27,-4,21,-44,23,42,18,-34,-3,-8,0,-43,-57,-101,-40,-21,50,-22,8,-34,-6, -13,-6,6,54,75,1,24,26,-3,-33,-7,59,-26,-29,-88,51,28,8,-62,-26,-43,98,-70,39,-78,-10,3,-42,-10,-101,73,37, 40,18,1,77,117,-75,91,72,125,54,42,-24,-89,-13,28,73,19,35,-10,13,-18,13,108,71,127,6,17,65,13,80,1,-58, 
  /* [35][1][][] */ 54,66,4,-29,-36,-40,4,15,26,-1,-6,35,-7,-35,1,-22,4,7,-80,-26,27,0,1,18,-43,9,-27,-47,-21,-26,11,78, -88,4,-38,2,-17,73,29,43,5,38,-76,16,-15,14,-50,25,33,-34,-15,-1,-92,48,-57,47,-40,17,-47,-51,20,-88,22,29, 27,-55,25,3,10,-70,-68,-112,-35,4,-79,-8,43,-54,-21,-25,14,67,-32,59,-27,-46,-3,26,37,11,-64,-72,21,-54,3,0, 
  /* [35][2][][] */ 42,104,76,56,-1,26,21,-101,13,-4,58,59,-21,80,109,40,-30,-18,37,28,43,32,27,101,50,4,31,5,-6,44,29,-2, -15,-20,-49,22,-4,24,-30,43,-5,30,-17,9,50,42,-73,-1,-67,-39,35,-39,-9,37,-42,-15,-38,-15,-30,-40,0,-53,50,28, -28,-8,-27,-105,-35,-34,-103,-92,-48,-10,-91,-43,-47,-4,-36,-94,-6,-38,-43,30,-46,5,-85,17,-102,-31,-52,-109,-47,-61,-114,13, 
  /* [36][0][][] */ 38,-28,-37,-14,-84,50,-40,46,-40,3,8,4,47,-34,-49,-17,44,5,17,-11,11,0,-74,-71,-65,40,46,-23,39,-42,15,36, 17,26,29,-20,-26,27,-27,-43,-3,21,-13,-16,12,4,37,-30,-16,9,-25,-31,-1,-2,-59,14,-21,-20,5,-8,24,-38,-35,70, 12,21,12,-65,-37,-3,-55,8,-61,15,-32,37,13,1,-29,-24,28,-28,-36,-40,49,-24,-56,-31,-57,-26,-25,-52,-3,23,-2,-7, 
  /* [36][1][][] */ 16,-21,-2,-33,4,0,-65,24,-29,14,26,-5,-18,-36,-108,-4,63,21,-15,-22,54,-26,-52,-38,-66,1,27,-7,-7,-17,-23,-58, 34,35,19,20,-39,-4,-51,-49,-38,28,-20,54,-41,-16,4,14,15,-7,-59,-26,-14,2,2,-7,-46,-7,27,-46,-16,-53,-8,-35, 18,25,16,-54,-68,0,-45,22,-42,13,-31,3,-10,12,-5,-25,-15,7,-50,3,26,-14,-39,28,-73,18,-9,-76,15,-21,-6,23, 
  /* [36][2][][] */ -4,-57,-35,-71,-69,-17,-76,48,-37,26,-12,25,-21,-12,-60,43,31,53,-4,4,7,24,-24,-24,-60,22,-6,-27,18,17,18,-57, 12,20,36,12,-75,43,-127,-32,-50,-3,-80,40,-19,-8,-27,21,-24,16,-34,31,29,-11,-79,1,-24,5,-62,-84,7,-6,-61,-58, 31,50,25,4,-47,7,-70,12,-69,2,-77,14,-18,-35,-4,-42,26,13,-21,10,-24,-19,-84,7,-41,12,28,-116,8,-67,-30,-30, 
  /* [37][0][][] */ -16,-34,-127,-8,-41,18,-35,57,25,1,64,-36,-5,-7,-73,10,-24,-26,0,-33,-18,-33,71,-68,-16,-65,27,24,-49,-48,16,-32, -24,-18,-58,34,-16,22,-47,36,-40,-12,39,23,-30,7,-12,26,25,40,-44,-52,-7,-7,8,20,-35,-27,-17,-44,-70,2,-31,12, 17,2,-32,11,7,-34,-35,-26,6,40,-40,19,-33,0,53,51,27,30,-54,1,-64,-29,-9,39,-29,-22,-43,-68,27,-33,35,29, 
  /* [37][1][][] */ -30,-21,23,27,3,5,-57,47,-12,23,-47,53,-21,-10,-69,36,-8,23,38,12,28,26,16,-5,20,-30,-34,27,16,-2,-51,-47, -8,47,48,48,9,40,-10,19,55,14,-13,24,-5,3,-32,25,-38,28,35,32,-1,-10,1,66,-3,26,-39,31,49,-91,-39,-58, 12,71,40,23,65,-8,3,-43,48,3,2,-46,-9,-12,3,39,-6,-24,-6,35,64,-30,12,27,3,32,36,-17,49,52,-19,-79, 
  /* [37][2][][] */ -53,-20,-32,-10,-37,17,-35,24,-66,-21,-12,-55,46,-18,-34,-82,-9,-68,5,8,-18,-13,-56,43,-25,26,-21,-68,33,-28,-63,-21, -1,30,18,-2,-43,-1,-8,-11,-39,-24,-11,-25,-5,-26,-2,-15,25,-17,-24,-13,8,1,-53,25,-20,33,-32,-21,17,33,-2,3, -9,-6,-23,-50,-64,-45,31,51,8,9,-41,33,24,-35,24,-17,-20,6,3,33,16,-13,16,0,44,51,1,-14,8,32,19,8, 
  /* [38][0][][] */ 10,-30,36,-30,-52,-20,-11,-27,-62,14,-75,-73,10,-20,-57,-75,-9,28,-60,-56,32,-34,-78,0,-77,25,-26,-63,32,-55,-62,17, 12,33,-19,-13,15,-1,46,-23,27,-25,-10,1,-2,45,73,43,-31,-55,41,-18,-12,-2,27,59,74,-48,-44,17,-1,18,-26,-65, -44,-8,-15,20,8,-1,-15,-62,-24,-10,15,13,-4,34,31,3,-6,24,37,40,14,21,-12,-25,-37,17,-10,14,-67,45,22,20, 
  /* [38][1][][] */ 2,-52,33,-22,-2,-54,6,-7,-15,1,-25,28,10,-58,-57,-80,-8,26,-45,-26,43,-26,-77,11,-50,42,-28,-53,-29,6,-11,27, -8,9,-54,12,61,15,96,-18,35,-29,19,14,-34,-15,95,48,-41,-31,-16,28,-12,31,13,45,127,-37,34,43,-64,101,17,-24, -15,8,-80,-4,20,-12,95,33,14,-62,49,-21,-22,16,48,10,-39,-23,60,17,-25,36,75,11,101,-56,11,56,-7,49,61,-3, 
  /* [38][2][][] */ -9,35,20,6,19,-15,-57,-55,-50,0,-5,-17,-23,-17,24,3,22,2,-27,-20,20,21,-69,5,-67,14,-21,-56,-49,-27,10,12, 9,-19,17,-45,-25,-33,-26,-16,-17,32,-47,25,-2,14,-20,-73,49,51,-27,-10,0,-64,-75,3,11,7,-38,-56,-14,-21,-9,13, 11,-37,-30,-75,-52,-30,-43,32,-30,27,-48,35,-10,-27,-71,-74,32,14,-12,5,2,-9,-38,-15,-6,-14,-16,-48,-7,-18,-22,-11, 
  /* [39][0][][] */ 88,-45,6,33,8,-48,-26,23,65,58,-25,80,-11,-3,-43,-9,12,-16,-64,-33,4,-2,1,26,17,-5,-20,-17,-57,6,-39,1, -39,-25,-4,8,63,60,67,60,-12,-9,-37,64,6,-39,-22,44,51,-29,-70,-4,-29,61,-47,34,-32,4,11,-28,17,-26,29,43, -72,-8,-13,69,90,-116,80,-44,82,-41,32,-81,-56,-48,39,29,14,-36,6,44,-14,6,121,82,127,-1,-34,96,-18,98,82,-22, 
  /* [39][1][][] */ 32,79,57,70,-82,-6,-48,18,32,9,-85,40,20,25,-83,-6,57,47,-12,-45,0,27,18,18,-28,-3,-31,-27,-9,-35,-19,57, -43,-8,21,-64,-40,16,-29,68,2,-44,-104,-29,61,20,-5,15,-49,22,-45,-12,-10,-29,-100,20,-75,24,-10,-42,12,-92,12,28, 0,-47,-56,-59,-50,21,-1,-15,-29,25,-3,-7,44,-57,-31,12,-76,-19,-13,30,-22,-53,-4,4,54,-63,-10,-27,-27,1,-13,-30, 
  /* [39][2][][] */ 28,33,53,32,15,-11,-19,-12,-7,-5,25,48,12,38,59,14,26,39,16,-20,68,-14,-44,75,-67,65,-17,-18,60,-30,-69,-25, -24,-6,0,-4,-62,-80,-52,65,-43,18,-74,-84,-18,21,-3,-69,-18,-84,-21,-54,-27,-5,-87,-18,-27,10,-3,12,31,-23,7,-39, -46,51,-62,35,69,-47,0,13,43,-46,5,-15,49,-22,50,-14,6,-51,28,17,-23,85,-15,95,-26,-12,-7,48,-19,-43,9,8, 
  /* [40][0][][] */ 42,38,-34,-36,-65,17,6,-56,22,15,-5,30,-82,47,-23,-9,14,-28,-5,-6,3,-29,-30,-35,-63,-56,-7,23,8,12,-92,14, -31,-25,-22,-21,23,30,-21,28,-8,-17,-24,8,33,45,-9,47,15,-40,-50,-18,-126,59,-57,-26,-30,-2,-24,-41,0,-107,39,34, -62,-7,-13,68,28,-36,26,-2,59,-12,25,-4,18,-24,-19,50,-6,22,63,24,43,4,5,69,39,3,5,17,12,-21,3,-30, 
  /* [40][1][][] */ 69,5,-2,30,-26,-13,-3,9,19,15,-53,17,-34,10,1,30,34,-27,-32,-24,-17,-33,36,21,-13,20,-45,-66,-8,-18,5,27, -30,-10,-32,-37,3,40,23,47,4,5,-8,9,-8,2,20,35,-5,-25,-67,-29,-127,53,6,17,-54,43,-31,-46,9,-38,14,62, 39,-25,-13,10,-50,-20,8,26,-25,-8,-62,4,7,19,-35,-51,-27,67,16,2,7,-10,-59,-20,-4,2,-7,-37,12,-31,26,-19, 
  /* [40][2][][] */ 15,64,39,33,20,18,16,-20,55,50,34,31,0,30,91,9,31,22,16,37,6,-6,21,52,48,9,34,31,53,13,-29,-50, -43,16,12,-13,0,1,4,2,-25,16,-28,2,-10,6,-67,0,-16,-6,-40,-18,-38,22,-20,32,-33,5,8,-46,-16,-47,-5,48, 14,-45,20,-22,-68,17,19,25,-62,-23,-46,-5,6,-25,-31,20,9,17,-3,2,-9,2,-98,34,-58,33,-41,-58,-11,-72,-5,-22, 
  /* [41][0][][] */ 14,26,0,-59,15,-11,-1,22,27,-48,-48,17,44,-24,-5,-7,-24,26,-22,-2,43,-9,-86,29,-8,48,-3,-45,15,-48,-17,-3, -41,65,58,34,22,0,103,-66,50,17,38,-45,-32,84,63,46,35,-35,8,32,26,-4,78,52,39,-63,18,23,32,116,62,-73, -7,-24,3,-4,-34,-30,-31,-39,-61,58,-13,-10,-13,45,-36,-52,-5,45,21,14,5,-37,-26,-52,-46,10,6,-34,-63,10,18,-23, 
  /* [41][1][][] */ 27,-42,75,-16,-95,-49,-51,-15,-25,5,-80,56,-1,-39,-4,-68,-39,10,-72,-68,18,4,-114,-25,-111,46,-17,-16,17,-19,-53,5, 16,-3,-36,-15,10,-13,45,-54,36,8,-16,4,-51,-19,10,-46,-10,-60,17,22,-10,6,31,51,114,-5,30,8,-31,61,-37,28, -4,32,-122,83,88,-34,62,59,62,-71,62,-16,24,-7,-4,50,-32,0,11,-34,-36,100,72,-20,103,-41,-35,75,36,37,98,65, 
  /* [41][2][][] */ -4,18,61,-2,-76,3,-86,-62,-14,17,-60,-21,-1,-53,22,-18,-5,-14,-49,-49,38,3,-127,36,-124,62,-93,-82,5,-126,-32,56, 56,27,1,26,13,-35,-34,-3,1,19,-44,30,19,24,-6,-96,-33,-32,-73,-48,-31,-63,-43,29,-99,-31,-41,-52,-13,-90,-56,10, -9,-3,-7,-64,-3,44,44,40,21,18,-2,-21,5,10,-12,-26,-36,41,-45,-33,15,37,-18,-87,-16,39,-65,12,27,3,84,11, 
  /* [42][0][][] */ -3,-88,-42,-62,-89,-6,-26,38,-69,-3,19,-2,32,-29,-1,-8,48,11,-10,-9,-5,19,-90,-71,-122,-21,61,24,-27,-86,-43,73, 12,5,-5,-13,-83,-6,-65,-14,-48,7,-14,-16,13,-17,74,-42,27,0,11,-8,22,-6,-84,-44,-92,-63,9,-55,-6,34,-127,21, -33,3,-41,1,-8,10,-19,29,-29,8,-20,9,7,15,-27,-52,47,-28,-17,-58,-5,4,-34,22,-66,-39,-20,-70,-25,16,5,27, 
  /* [42][1][][] */ -1,-35,-40,-28,-22,-10,-90,29,-27,-17,15,-40,-73,-44,-31,15,-6,33,-21,11,20,-50,-18,-57,-38,-44,9,-18,-22,-34,-1,-28, 27,14,31,24,-36,6,-21,-42,-4,19,7,43,-85,6,25,-45,-13,-16,-48,13,27,-12,10,6,-24,-48,-10,-7,-29,-8,-58,-9, -6,13,-31,-21,-21,11,-30,13,-20,16,-53,19,11,11,5,-29,-6,8,-35,-29,-33,-25,-22,3,-46,-23,5,-89,14,-54,18,-2, 
  /* [42][2][][] */ -3,-60,5,-39,-27,23,-63,35,-64,-9,-24,0,-64,-33,-116,28,17,41,-8,16,35,52,-51,9,-100,18,-34,1,8,-31,-27,-55, 46,25,23,4,-6,26,-64,-23,-54,32,-69,14,-22,15,5,-15,-27,0,-4,16,6,-41,-60,4,-71,12,-67,-51,29,-85,-48,-56, 47,38,49,-42,-42,33,-63,30,-26,9,-50,31,-3,-5,-8,-70,-4,36,15,-10,2,10,-76,25,-65,14,8,-63,6,-64,22,11, 
  /* [43][0][][] */ -16,62,17,57,54,-46,75,14,78,-13,28,-6,-24,46,57,45,-30,-27,33,50,27,63,70,45,88,4,-3,46,4,114,54,-15, -1,9,-25,15,50,-47,2,-13,-9,50,37,-22,-35,31,1,-46,20,4,15,56,5,-14,7,32,29,2,47,8,-37,41,-23,-54, 25,-8,-10,-39,-59,-10,-22,-13,-63,-6,-57,-11,-2,-58,-60,-32,-19,17,-26,-12,2,-4,-59,-10,-22,50,-36,-63,-26,-52,4,15, 
  /* [43][1][][] */ -39,25,-40,1,13,-13,53,-69,11,6,31,-42,-49,8,108,40,-34,15,15,24,0,-3,68,45,127,8,23,49,-19,75,4,-19, 5,0,-16,0,9,0,44,40,12,14,23,-20,-34,8,43,-35,-14,31,-27,50,23,-17,16,-14,85,-17,-11,27,-25,55,-42,-47, -20,-71,-3,-61,-62,-42,-42,9,-57,11,-54,-8,21,-54,-87,-84,-10,35,-56,-52,11,-49,-77,-21,-42,-31,-42,-70,-1,-94,-50,0, 
  /* [43][2][][] */ -17,-25,39,-75,-19,-3,-31,-45,-21,-23,-6,21,27,-8,59,-67,19,19,-24,13,21,-39,-16,-52,2,-5,34,-17,-26,13,-32,-22, 20,-42,-9,-103,-39,12,-50,-25,-65,-2,-36,10,13,-88,-72,-47,-65,17,-17,9,22,-5,-57,-58,-24,-6,-19,-22,-22,-49,-46,-2, 27,-11,13,-74,-56,-31,-43,-13,-25,-12,-69,-20,-13,-47,-69,-98,-26,-12,-15,-57,36,-41,-44,-55,-33,-24,-55,-65,-5,-77,-12,12, 
  /* [44][0][][] */ 15,22,2,-23,-26,10,-57,-30,13,12,67,-43,0,-47,-113,24,101,-4,22,-46,25,11,46,-35,-92,-20,-53,66,-17,-28,8,-99, 14,-24,-56,44,-57,-4,-38,-50,-16,14,11,17,-14,32,-11,-34,-37,5,10,20,-26,19,50,7,-28,4,27,-30,-22,-41,19,-38, -42,23,11,24,-23,65,18,38,37,-14,21,73,78,14,14,34,-48,5,-42,-121,-59,-42,-34,19,-127,-24,55,5,-36,-58,5,76, 
  /* [44][1][][] */ -58,19,20,3,-38,93,-59,30,6,-6,32,35,-63,48,-100,16,15,-1,28,21,31,19,-49,35,-26,11,-50,48,33,-56,-33,52, 17,-6,42,6,-20,34,-106,-18,23,-9,46,7,-21,26,-21,30,64,4,22,61,5,-97,-39,-12,-121,12,10,17,-13,-98,-54,-81, 61,57,59,17,-17,48,-58,-77,27,28,2,59,13,-23,-34,-32,-37,-6,15,-21,102,-45,-33,10,-73,26,18,29,31,-23,-17,-36, 
  /* [44][2][][] */ 24,12,-7,32,-3,17,10,10,-51,2,-63,22,10,-20,-56,23,59,-50,-44,-20,2,-22,-50,-47,-29,9,55,-60,8,-68,44,84, -18,22,-76,-16,-31,6,-74,85,7,47,40,67,-41,-19,-10,33,54,36,-40,8,-26,79,-20,42,-39,17,-6,-30,10,-7,5,98, -4,-21,-53,-2,40,0,-44,-39,-1,36,34,41,-53,-20,-92,2,-14,21,-30,-14,54,-107,14,-33,-35,-65,-59,2,-66,-70,15,-45, 
  /* [45][0][][] */ 26,-69,-77,6,-34,45,28,78,15,3,-11,-44,-80,-25,24,-39,51,15,-14,3,14,-80,92,-72,-42,-47,26,24,33,62,-14,-13, 54,17,22,-4,-6,-27,-58,24,22,-11,-52,59,11,-15,40,-46,-24,12,14,-33,-30,-44,-22,-48,-71,-49,-46,-28,-5,-25,3,15, -12,-3,-49,38,-38,76,44,83,89,26,-15,63,-14,12,-24,10,-32,34,-55,-59,-32,44,-24,15,-61,66,-75,59,23,-63,-35,31, 
  /* [45][1][][] */ -42,-76,-33,14,-77,20,-75,52,-102,-25,38,-18,-69,-29,-53,45,36,29,-32,11,-17,-20,39,-3,3,9,-25,-35,-40,-36,28,8, 18,-37,-104,46,-19,-8,-13,21,-79,24,3,-43,-70,-6,-32,23,7,58,-27,-27,23,-38,-36,-7,12,-17,-77,-45,-7,-38,-44,-57, 26,12,-59,1,1,-31,-34,28,-41,70,-80,-15,9,-29,5,-10,33,-18,-26,-24,-26,14,-61,-21,-47,33,-28,-48,24,-9,-18,4, 
  /* [45][2][][] */ -101,6,67,-41,-25,70,-32,39,7,-32,-56,1,80,-4,-27,47,0,43,93,-19,33,25,-49,35,-40,47,-111,19,70,-79,-40,-64, -63,56,51,91,23,23,20,-62,15,-11,59,-16,69,-12,75,34,5,-24,40,127,13,-5,-54,57,-42,-21,28,-14,21,20,-36,-91, -11,57,81,96,42,5,52,28,5,-57,85,28,13,15,-51,54,45,-49,16,52,93,7,-12,45,4,22,56,60,-11,21,-13,-4, 
  /* [46][0][][] */ 67,-4,-48,2,-58,34,-3,12,9,-10,-55,37,-23,35,-74,-8,-26,52,-51,-44,-5,-9,-30,-77,-2,-37,-101,-24,-38,-23,-9,27, -53,-34,-29,32,-15,74,29,42,-14,24,75,65,1,-17,-81,-23,35,-10,23,42,-60,23,22,0,-90,18,21,8,-22,-100,-17,56, 46,11,27,19,-43,72,-48,-34,25,-62,57,-10,52,-4,57,21,-29,-16,52,-59,59,-44,-81,-66,-75,-23,77,29,-12,-41,-68,59, 
  /* [46][1][][] */ 26,32,-4,42,-55,-19,-16,56,1,43,-5,10,-43,-11,8,42,35,17,-3,-99,-79,1,31,42,-28,-21,-89,-83,31,-58,-32,3, -32,-10,-63,-41,-44,17,8,96,6,17,55,-32,-21,-19,7,5,15,3,-10,15,-48,-1,3,-81,-26,-6,0,6,47,-56,69,28, 16,-24,-51,18,-11,5,-18,-43,-36,-4,22,9,-85,-48,-10,-2,-68,37,5,-40,61,-76,-30,-8,-59,-85,-12,-32,-48,-6,-37,-74, 
  /* [46][2][][] */ 39,20,37,71,3,46,-1,-22,25,-11,-6,27,29,-17,10,-36,-14,-41,3,9,55,-36,-58,26,-97,31,7,-26,12,-8,-85,-52, -22,46,-5,40,17,11,-77,-18,20,34,71,42,-21,11,-111,44,17,12,31,-1,16,-14,-40,-38,-71,14,34,46,39,-27,17,-12, -4,-63,56,9,46,83,-31,-20,11,6,12,31,-39,34,-108,11,3,49,-22,21,54,-60,-8,34,-38,-41,-109,57,12,-46,-55,-127, 
  /* [47][0][][] */ 28,-120,-60,61,38,-51,41,-13,37,36,37,60,-54,-66,-20,-52,38,4,-31,50,-6,-19,59,-32,-102,-94,29,11,-7,-9,-1,-66, 47,12,-14,57,25,-26,6,61,38,31,-60,87,-7,-63,-7,-7,-40,-15,-24,17,8,-53,-30,-91,-37,-37,-13,23,-47,41,-73,82, 54,12,-35,-12,-14,-23,5,86,-42,-65,-28,19,-41,-33,-47,12,39,5,-20,-70,3,31,-11,65,-93,15,-34,-68,16,-91,-12,39, 
  /* [47][1][][] */ -28,-55,-32,0,-62,23,19,29,27,-16,31,-29,-93,-7,-86,67,52,6,-18,15,-6,-98,92,-19,6,-30,-76,-40,-29,-23,27,-81, 8,7,-45,32,-53,1,-21,-17,-68,33,-27,-28,-97,-7,17,32,65,-17,-53,-70,-32,-83,50,56,17,-22,-104,-90,-2,16,22,-95, 20,24,-91,124,-21,-29,-49,-16,-16,40,-103,-9,-7,15,-58,51,73,-6,-89,-71,-91,-35,-32,18,1,34,-12,-56,28,-63,-5,40, 
  /* [47][2][][] */ -38,21,53,-3,-15,53,-105,-46,-35,35,-33,10,80,28,-111,13,-16,13,74,19,8,1,-117,-24,-100,51,-77,13,9,-84,-8,-13, -37,117,30,77,62,60,79,-84,90,28,98,39,16,114,82,54,-37,11,80,113,18,19,-2,127,-29,32,-12,49,37,-17,-22,-123, -57,79,81,47,16,44,0,-67,22,-81,23,15,19,-10,-24,-17,-41,-16,4,122,60,35,-56,83,-54,-7,-3,-26,-31,-36,11,-27, 
  /* [48][0][][] */ -32,5,-53,-38,-66,24,-68,32,-28,-34,29,-24,44,-47,-21,-78,-50,-65,10,-23,-9,-8,-75,-40,-35,-21,86,-3,-32,-46,8,73, -4,-52,61,-29,-123,54,-9,0,-47,-35,-12,-28,23,-1,15,-13,-56,27,15,-34,63,22,-93,-85,-65,41,7,-2,-38,-32,-55,50, 16,21,86,-23,-26,35,-43,-45,-105,47,-50,44,-35,43,-40,-2,41,14,25,8,127,13,-44,-36,0,24,22,20,-39,74,-18,-54, 
  /* [48][1][][] */ 34,-62,-6,-15,-26,60,-20,13,-28,39,20,11,28,-66,-44,-65,-26,-15,-6,19,-22,-38,-69,-61,-33,7,-26,-13,-50,-92,3,-31, 35,-52,-42,-69,-67,20,-36,69,-70,17,-34,-4,16,-4,-11,-65,-60,5,-30,-18,10,-71,-97,-85,-26,-26,-32,-58,5,-32,-7,8, -5,-6,-65,-9,-50,-32,-75,1,-77,33,-98,34,3,-12,-16,-54,16,42,-55,-4,14,-19,-62,-19,-87,5,-19,-79,33,-43,-51,-4, 
  /* [48][2][][] */ 16,-124,-57,-96,-75,-50,-42,-7,-41,3,-32,5,-15,-84,-72,-10,-18,24,-16,3,59,-39,0,-69,-69,-27,-40,-54,22,-12,-10,-87, 7,-24,-20,-40,-57,12,-72,-2,-81,50,-31,-24,-3,-37,-84,-52,-22,-18,-105,30,-31,-1,26,-23,-72,-1,-46,-85,-16,-4,-95,-62, 24,30,-5,-6,-43,-24,-70,-11,-97,9,-119,22,-14,-35,35,-46,15,37,-106,-20,12,-43,-54,-9,-58,24,-17,-96,-9,-110,-13,-36, 
  /* [49][0][][] */ 38,-25,38,-51,21,-43,-9,-22,-26,5,-55,21,17,-18,-90,-36,17,48,-25,-12,-4,-15,-54,-14,-4,62,-30,-24,9,-98,-9,2, -21,66,32,20,19,-46,67,-31,56,-35,-15,-37,-27,6,25,69,-9,-21,37,8,-13,14,50,42,56,-33,-7,42,7,40,14,-57, -20,2,-31,3,47,-39,-36,-35,43,12,18,-24,-47,49,50,5,-16,16,-2,68,35,40,69,21,21,13,34,27,-89,48,52,-11, 
  /* [49][1][][] */ 26,30,33,-36,-44,-26,-57,-43,-29,-21,-4,35,-11,-53,-57,-71,-7,30,-65,-4,11,13,-44,31,-14,54,-22,-87,-29,-55,-4,6, 14,19,-8,59,65,3,41,-19,63,-20,22,0,-73,16,56,-4,-25,-31,19,-8,-2,-2,20,45,113,-18,-7,58,-64,76,-6,-46, 6,-15,-67,-29,-27,-12,61,58,4,-23,33,-11,-37,0,85,-32,-15,-33,11,20,4,11,80,14,72,-3,-16,13,-25,16,37,-2, 
  /* [49][2][][] */ 13,8,-7,26,-12,4,-26,-46,21,-12,12,8,-10,36,9,-10,-49,26,-12,-25,-21,20,-46,22,-23,-1,-4,-34,-47,22,24,48, 0,-49,7,-47,-24,-29,44,39,-3,32,-50,-9,1,20,41,-18,-6,-7,-8,10,-7,-5,-38,3,67,16,-10,-14,-36,-5,-10,-3, 20,-45,-18,-91,-24,7,-68,-6,-49,20,-65,18,-5,-56,-127,-61,-49,39,-30,6,-25,-9,-38,-94,-69,-11,-24,-58,7,-73,0,19, 
  /* [50][0][][] */ 36,-57,4,-44,14,-58,-55,0,-54,11,-68,-95,-7,-94,-27,-8,-9,53,-70,-32,10,11,-117,-28,14,6,-61,-100,-36,-54,-39,-31, 18,58,34,25,19,-23,53,27,64,-21,23,4,57,30,26,34,-30,34,7,-37,-23,72,11,57,88,16,19,62,41,0,13,-2, -81,16,6,-51,-15,-51,-31,32,-30,15,-37,-12,23,33,-60,-20,15,-35,50,7,-83,52,-29,-21,17,29,44,23,23,-16,46,24, 
  /* [50][1][][] */ -18,15,-31,47,25,-26,29,-20,31,-32,33,6,-24,-25,-52,16,-34,0,-41,-39,-15,43,15,-5,19,23,-19,-28,38,-57,25,-37, 31,26,-37,20,12,-17,56,-30,31,0,81,-43,-55,19,127,17,17,-27,76,41,37,-57,61,46,115,-19,75,71,-36,115,7,-23, -22,19,-22,-81,-17,11,-17,39,-34,-33,-43,-2,27,-51,26,-93,21,-44,-14,-31,-57,-4,-42,7,11,16,10,-52,19,-3,-16,16, 
  /* [50][2][][] */ -66,37,-40,23,56,-3,24,-15,19,-54,27,-6,60,46,-82,-29,-42,-41,1,-32,-22,0,22,21,33,-48,48,67,-32,-36,29,9, -14,-27,-40,-59,-55,-42,-39,77,-43,4,5,-30,10,-4,5,-23,-56,19,-54,52,25,-88,14,-32,-17,-26,-9,10,-44,24,-44,-21, 30,-16,-13,-68,-26,-26,-53,-9,-23,20,-62,36,41,-74,-33,-33,-13,4,-120,-4,-13,14,-64,-68,-67,6,-96,-63,-36,8,-23,6, 
  /* [51][0][][] */ 34,-83,-34,-18,-63,26,-49,59,-25,6,31,13,23,-79,-4,-118,-51,-18,45,22,4,10,-99,-102,-92,14,82,15,-16,-66,21,24, 25,18,39,-25,-88,4,-41,-28,-42,-14,5,13,-28,2,86,-51,-17,-42,5,-3,-11,-3,-87,-57,-84,-47,63,15,23,10,-71,74, 25,23,9,-58,-36,40,-58,15,-20,33,-25,34,46,58,-19,-10,23,4,-42,-65,35,-26,-70,16,-77,-1,-17,-26,22,18,4,10, 
  /* [51][1][][] */ 0,-36,-43,-62,-10,56,-65,10,-23,43,38,-29,-62,-43,-61,11,18,37,13,19,36,-44,-12,-88,-72,8,20,17,65,10,19,-24, 2,35,14,-24,-65,1,-64,-14,-41,8,-34,40,-7,-27,100,-25,7,24,-44,-29,-4,-51,0,-44,-42,-59,27,-57,-44,-8,-47,31, 6,-26,-12,-36,-66,28,-13,0,-42,-5,-98,11,-42,14,-7,-17,54,24,-57,-1,-56,-12,-44,18,-77,-1,-60,-101,26,-41,-31,38, 
  /* [51][2][][] */ 26,-64,22,-72,-59,29,-111,53,-33,41,-34,15,11,-16,-127,4,15,58,35,-20,-3,-20,7,-64,-35,12,-44,7,47,-12,2,-62, 46,2,31,2,-4,71,-89,-56,-16,23,-36,27,-55,-19,-77,-11,23,34,-20,-18,-16,5,-29,1,-69,15,-74,-40,79,-56,-83,19, 37,16,18,-21,-58,-57,-74,-1,-74,23,-77,7,12,-29,20,20,-28,55,-30,-19,-16,-26,-43,63,-65,46,32,-127,49,-35,6,-37, 
  /* [52][0][][] */ -55,-12,2,-5,-25,-51,-37,36,2,-1,-16,-20,-16,14,-3,10,12,33,-17,13,-22,-3,-25,16,-11,25,-21,-17,-18,-12,24,-7, 17,12,21,19,31,-41,-32,7,-36,-9,-72,-21,11,-55,-15,-16,38,61,-24,-33,-6,0,-30,4,-24,29,15,-41,35,-34,-32,-14, 21,12,-24,-9,-30,-15,-58,-14,-93,14,-28,-5,28,-33,-27,-34,-3,22,-93,-23,-31,5,-18,-34,-73,6,6,-120,-2,-66,29,-12, 
  /* [52][1][][] */ -49,22,-73,73,81,-43,69,13,54,25,74,13,-28,20,25,39,-14,-40,27,29,-8,21,73,45,78,14,11,39,9,96,22,-48, 4,2,4,-4,38,-52,-21,-38,6,33,5,-30,-73,37,21,-53,-39,29,-1,58,59,-10,25,14,12,6,5,0,-18,59,-47,-12, 16,-26,32,-14,-36,33,-69,-15,-53,18,-67,15,-17,-21,-79,-20,-26,13,-54,-80,33,-23,-32,-40,-72,14,-22,-127,-34,-34,-13,-1, 
  /* [52][2][][] */ -18,8,-54,50,6,-21,60,-39,20,5,32,-8,59,-8,5,3,-92,34,23,35,11,19,24,12,53,-27,82,52,-35,90,56,-4, -15,-44,0,2,-11,-45,38,17,-50,-1,-16,-11,15,0,21,-44,-27,3,12,73,27,-14,50,-30,56,-8,33,30,-25,17,-19,-28, 30,-50,46,-16,-25,-20,-22,12,-54,-1,-71,10,2,-25,-66,-47,-19,19,-26,-61,4,-18,-56,-40,-42,55,-3,-94,-3,-45,-11,8, 
  /* [53][0][][] */ 26,-46,-2,-5,-54,-37,-2,20,-34,-5,0,20,-47,-65,-62,-44,32,51,-15,13,24,-87,25,-71,-53,-6,-38,2,8,-54,39,-79, 56,24,-2,-15,-30,-31,18,24,5,-1,-46,49,59,-35,2,-29,53,-5,-51,-36,-3,-20,-9,-86,-18,8,2,-7,21,-38,21,-43, 4,-4,-24,-16,-18,23,26,53,22,-24,-19,47,-43,2,-76,-8,-18,-37,-59,-88,-26,-3,-40,21,-16,9,0,-28,45,-40,-11,52, 
  /* [53][1][][] */ -27,8,-52,26,70,-84,29,55,64,-56,91,-11,-60,-39,-42,12,15,-15,5,37,16,35,43,21,19,-28,-55,38,-7,29,37,-47, 1,21,-1,45,26,-29,29,-22,-10,63,-9,-2,-127,19,79,40,-27,26,9,0,-12,-53,58,12,76,-13,29,-35,-23,87,-23,-48, 13,23,-53,52,5,-33,9,13,-27,43,-18,6,-16,3,-5,21,-20,-7,-77,-8,-46,7,-31,27,-41,12,-12,-26,8,-19,2,-24, 
  /* [53][2][][] */ -84,43,1,-14,-2,22,-22,14,37,29,-4,-47,-2,50,-79,66,2,23,6,21,-25,42,-25,9,-28,7,-19,31,48,4,-17,-48, -24,-5,62,13,-4,27,10,0,22,48,-53,35,15,16,-19,-10,5,10,-7,88,42,-43,30,56,-1,14,2,-1,30,-1,-25,-32, 16,34,118,-1,-50,4,-36,-10,3,25,-35,58,4,-38,-7,-18,-15,18,38,55,50,-19,-31,63,-32,23,27,-32,34,-7,-10,-3, 
  /* [54][0][][] */ -7,1,-3,-31,-74,-45,-30,11,-47,-8,-101,-69,56,-40,34,-62,29,27,-43,-15,-21,7,-53,2,58,20,-32,-86,5,-45,-86,-27, 51,-13,0,-2,-71,-61,-42,17,-100,-9,-80,41,37,-37,-43,-60,19,21,-41,-3,-13,3,-90,6,-6,-1,-87,-96,-18,-6,-17,-19, 27,0,0,-79,-50,-66,-65,-46,-64,18,-10,-37,16,-68,-52,-50,-37,-26,-54,51,5,-32,-45,-18,-30,1,0,-108,21,0,58,-34, 
  /* [54][1][][] */ -43,40,-44,59,24,-56,56,-46,36,-6,68,-20,-118,-22,69,22,-20,-32,-3,50,-29,59,89,10,67,14,-10,-55,-59,89,47,-43, 41,-10,-36,-12,75,-35,-51,-37,-27,67,-49,28,-46,2,28,-60,-45,-31,8,-23,79,-24,-17,8,-38,-46,-34,-55,-59,-39,-40,-21, 15,-62,22,-52,-29,32,-109,-23,-65,71,-44,24,-16,-32,-77,-57,-45,19,-42,-55,-14,-55,-42,-99,-74,49,16,-78,-12,-68,-37,15, 
  /* [54][2][][] */ -53,9,-84,94,71,-28,93,-62,85,-34,111,-26,68,16,20,72,-93,11,45,39,-6,31,87,50,108,-91,98,104,-16,92,97,-17, -12,-23,-58,17,29,-49,51,6,5,-31,76,-32,1,57,84,-6,2,9,-5,85,18,-22,43,-9,81,-40,31,22,-7,11,-12,-19, 4,7,53,-85,2,-3,-50,27,-57,-21,-82,-24,50,12,-96,-81,10,44,-36,-52,12,-33,-32,-4,-36,28,-24,-127,-14,-34,-17,17, 
  /* [55][0][][] */ 11,-30,38,-54,-2,8,-22,5,-19,-15,-60,15,10,-19,14,-26,0,36,-44,-1,36,-28,-102,9,-53,60,-9,-37,15,-14,-23,24, -15,44,-5,15,67,8,85,-8,39,-8,10,20,-50,22,59,54,-23,-43,29,1,-18,31,21,20,88,-46,3,22,20,87,25,-10, -29,13,-32,41,60,-7,47,-29,66,-10,77,-48,6,1,16,6,-31,5,48,47,-15,27,52,8,47,17,-2,74,-58,42,16,-13, 
  /* [55][1][][] */ 16,-29,29,-57,-70,-9,-55,-59,-24,13,-66,-12,-33,-26,-32,-50,9,12,-40,5,38,-16,-83,-9,-48,34,-6,-33,3,-12,10,15, 38,-3,-22,15,6,7,22,-8,4,-22,-4,6,5,-43,41,-39,12,7,-40,26,-12,-4,-8,54,34,-21,-25,-24,-45,42,-24,25, -29,-13,-55,-7,19,-24,51,7,5,-41,38,0,-46,-7,-3,15,-54,-35,18,-22,-13,71,9,-30,63,-32,-34,52,-36,30,51,17, 
  /* [55][2][][] */ 9,-62,63,-59,-40,-3,-118,9,-62,2,-87,-25,38,-21,-3,-12,-38,-5,-40,-23,28,-9,-123,-22,-109,50,-80,-86,-3,-63,-25,17, 15,3,18,-49,-41,-24,-95,-30,-45,-15,-101,17,21,1,28,-33,-1,-12,-20,-8,-35,-27,-127,-17,-70,44,-47,-74,-4,-23,0,14, -19,-34,6,-77,-16,30,-35,37,-25,15,-53,28,6,-26,-8,-62,-22,21,-30,0,4,36,-68,-4,-48,47,-32,-83,23,-66,-38,44, 
  /* [56][0][][] */ -22,-84,41,-85,-91,0,-52,-4,-74,-9,-74,-21,56,-81,15,-62,-15,1,-31,-45,-5,4,-119,8,-100,52,-23,-38,58,-90,-56,-13, 20,42,5,-11,8,-19,-5,-96,18,12,-20,-19,11,73,28,21,-23,-12,28,-9,-11,15,19,64,48,26,-5,-12,-14,37,3,-42, -13,29,14,-9,-2,17,-36,-33,-12,-3,35,-26,7,4,-8,18,-53,-7,14,-4,-19,43,31,9,4,25,41,23,4,11,18,-36, 
  /* [56][1][][] */ -9,-60,6,8,-1,-45,19,-15,1,2,-55,11,-20,-34,-16,-62,-8,45,-54,4,28,54,-17,4,2,58,-25,-10,-13,-52,-39,9, -6,44,-35,52,65,-23,89,46,52,-40,10,-11,-45,9,106,11,-15,-7,19,27,-32,12,61,33,127,-15,32,59,-35,96,27,-26, -1,23,-90,35,46,-24,105,9,-9,-42,16,-32,13,4,39,-20,-49,-35,53,-14,9,27,36,-2,82,-57,21,57,-38,70,37,31, 
  /* [56][2][][] */ -4,-4,21,-37,-8,-27,-57,-8,-25,17,-54,-17,15,-34,6,17,24,7,-49,-11,29,25,-77,0,-48,-8,11,-38,-16,-24,38,12, 57,-27,-3,2,-15,-14,-37,16,-11,7,-80,29,58,-17,55,-42,51,19,-27,-3,-30,-7,29,-3,42,23,-7,-3,-21,26,9,-25, -17,-37,-21,-55,-95,5,-15,50,-22,28,-102,18,20,-22,-31,-63,3,-2,-14,-2,-33,-39,-46,-46,-29,-6,-51,-63,0,-20,-81,5, 
  /* [57][0][][] */ -8,-37,-63,12,-59,-43,-12,-40,-54,-35,17,-33,-33,-74,30,-49,-53,-18,-64,-20,23,0,-99,-104,-73,-36,13,13,-42,-43,-102,55, -14,-45,-19,-66,-75,58,-46,6,-73,38,73,21,23,-59,-58,-54,8,-15,2,42,-33,18,-12,-53,-62,-9,56,10,-25,-13,-14,34, 5,-15,-31,33,-69,47,-56,-40,-1,-10,40,10,68,-4,-8,4,12,-2,10,-30,60,-5,-93,-23,-89,-2,22,-3,-5,25,11,32, 
  /* [57][1][][] */ 26,-90,-45,12,-38,-56,-50,27,-52,-13,-50,-25,-53,-101,-32,-11,-25,43,-126,-54,-3,-41,15,-47,-45,-16,-74,-54,-6,-99,-36,-43, 14,-73,-22,-31,-58,12,-20,10,-25,39,32,39,-17,7,-98,-63,-15,1,30,9,-29,7,18,-16,-45,-17,-2,11,-34,-62,8,-29, 32,-13,-9,26,-50,12,-42,61,19,-24,1,34,-44,-2,67,5,-23,39,-44,11,39,-47,-60,-14,-96,-31,-8,25,8,-28,-5,59, 
  /* [57][2][][] */ -26,-29,11,50,-5,-5,-75,10,-40,11,-9,5,-22,27,-127,-31,-5,11,-33,8,48,0,-58,25,-79,-41,-32,21,33,-94,-96,-60, 46,-14,54,2,-36,20,-48,-18,-15,6,42,27,2,-12,-59,2,-4,17,34,-9,49,-29,6,-2,-74,-38,16,-1,-21,-52,15,1, 28,3,54,9,-27,80,-4,9,33,51,8,24,-36,1,-43,38,-32,40,-48,12,23,-35,-76,-7,-101,46,-57,-5,7,-58,15,-3, 
  /* [58][0][][] */ 4,-20,3,-50,-55,37,-32,57,-49,6,-6,0,35,-60,-13,-91,17,24,7,10,33,31,-89,-57,-68,5,33,-18,-13,-73,8,27, 8,25,4,-35,-57,-3,-43,-36,-40,19,7,26,5,6,24,-14,15,12,16,-15,10,-4,-88,-31,-68,8,37,13,3,-4,-27,26, 4,34,43,-43,-82,-13,-61,6,-34,5,-36,16,2,36,-28,-28,18,-18,-26,-28,44,-11,-66,-32,-76,-4,-16,2,-5,19,5,-17, 
  /* [58][1][][] */ 11,-70,-32,-16,-6,23,-22,37,-34,-9,-5,13,-19,-45,-32,-54,3,9,-19,13,45,-30,-48,-55,-75,-12,5,-33,-4,-49,-37,-26, 35,16,-37,3,-44,1,-32,-7,-43,15,-17,30,-4,4,31,-7,-10,-17,-45,-20,23,-46,-23,-30,-64,-18,-11,-50,-12,-35,-18,15, 26,18,0,-42,-35,-9,-55,-19,-38,18,-44,43,-21,14,-11,-27,4,14,-60,16,-26,-19,-42,16,-62,17,-6,-88,33,-54,-19,33, 
  /* [58][2][][] */ 14,-86,-1,-71,-67,33,-55,57,-70,18,-39,-3,-29,-45,-50,-6,21,26,11,2,41,13,-4,-71,-23,21,-21,-19,14,-34,14,-36, 32,-1,11,-20,-40,48,-91,-46,-85,22,-66,9,-44,-38,16,6,16,-1,-38,15,12,-7,-38,-15,-55,13,-57,-78,22,0,-59,-34, 5,29,5,-10,-42,-32,-60,-13,-70,16,-78,26,29,-12,12,-19,-8,-4,-31,9,-31,-6,-53,3,-28,31,31,-127,33,-54,-13,3, 
  /* [59][0][][] */ 28,7,36,-24,-1,3,-54,-46,6,-11,-22,57,-13,-13,33,-18,-17,-58,-8,-36,25,-28,-50,36,-41,0,23,-27,15,-18,-46,51, -5,-2,22,-20,-7,40,37,25,25,-14,32,36,-2,30,44,46,-4,14,21,-5,-15,5,3,45,-16,-22,-6,22,42,31,34,12, -19,-61,-27,-17,-32,-26,12,-55,-8,-17,10,6,46,-25,-43,13,-18,-6,-5,10,-8,17,-17,-40,-14,-22,-12,9,-52,-5,28,-35, 
  /* [59][1][][] */ 49,36,17,1,8,-2,-35,-56,9,14,-10,27,-51,-4,12,-27,33,0,-17,-1,60,-4,-16,13,-39,-6,-20,7,-19,-9,-37,33, 0,12,-29,11,6,14,-21,16,22,-19,-21,11,-25,4,64,-17,-23,6,5,-6,-4,22,-11,14,24,12,35,-20,23,40,14,19, -9,-13,-7,1,10,-21,49,9,20,-34,13,8,-28,3,-10,9,-15,-48,-33,-21,-50,22,6,-2,25,-7,-34,23,-27,-4,3,31, 
  /* [59][2][][] */ -5,-19,-15,-18,-13,-30,-30,-38,-11,3,5,-15,-71,-31,-36,16,4,1,-74,-51,14,1,-19,-7,-27,-7,-127,-16,8,-66,-8,8, 19,-6,-18,6,-43,-18,-21,-14,24,31,-22,26,-9,-1,37,20,9,21,3,11,-50,-26,-2,19,-39,2,-1,-45,-10,5,13,-32, -30,-15,-18,-50,-44,50,14,124,18,23,-42,6,-3,-19,22,-22,-33,7,-12,-45,-49,34,-45,-34,-12,28,-19,-36,38,1,45,41, 
  /* [60][0][][] */ -12,-99,-24,9,-34,47,27,25,-14,-3,48,-5,-59,-57,36,-18,22,70,4,-53,48,-111,-58,-127,-39,-71,6,6,-57,-11,-103,-66, 31,-16,-49,-24,-2,10,5,35,-32,-11,-98,16,-56,17,-66,-57,-63,17,-43,-68,-3,-21,-54,-57,-71,-67,-38,-37,-27,-78,-60,27, 13,-33,-42,10,-34,58,-5,68,9,-10,39,68,-48,1,-101,-33,-14,11,-94,5,-47,24,6,34,-65,27,-58,6,-6,-76,-28,57, 
  /* [60][1][][] */ 5,-5,-10,-14,-49,23,15,56,-38,-69,-40,-46,-36,-100,-8,-22,48,8,-87,-12,26,54,-40,-37,-90,4,1,-15,33,-40,46,42, 40,-7,-7,16,-3,-11,-89,80,-27,53,-55,-52,19,-7,-84,-31,17,22,-56,-26,-42,8,8,-42,27,-17,-19,-103,-1,-49,-33,-43, -56,42,3,-44,-65,-27,-12,91,1,-21,-40,-2,29,-34,11,22,63,28,-36,-51,-80,-16,-19,-10,-79,-3,-20,-88,42,-20,-29,-15, 
  /* [60][2][][] */ -73,0,19,-13,-51,54,-43,14,-22,32,-51,-25,0,49,-104,22,-39,54,34,28,43,6,-66,34,-55,60,-120,-1,65,-67,-86,-100, 30,61,40,18,3,25,-37,-48,1,-1,28,27,34,-46,48,5,-50,26,25,71,14,-50,-72,-2,-70,47,41,-57,44,-54,-37,-85, 40,101,29,-15,-1,80,-9,-66,-10,-13,-7,31,-4,7,-54,15,9,-42,-20,54,66,65,-76,67,-41,16,33,-3,35,-124,18,-9, 
  /* [61][0][][] */ -46,-42,53,-8,-43,-53,-26,3,-31,-11,-105,-5,30,-15,-35,-23,-39,-11,-30,23,-42,-8,-41,-67,20,17,-39,-75,26,-56,-59,22, -14,23,55,-50,-45,2,-40,-31,-78,4,-56,16,-21,-76,-55,-35,48,49,-36,-53,13,-38,-36,-18,-22,47,-56,-14,0,-71,-38,-12, 1,1,13,-23,-26,-42,-32,-6,-82,56,-75,-1,10,-41,-24,-36,-25,90,-50,-6,-35,-12,-6,-75,-29,-16,-40,-70,-18,-24,5,-51, 
  /* [61][1][][] */ -1,6,-101,71,50,-64,-7,-34,29,-28,4,-9,-60,-20,69,23,2,-31,7,40,3,12,67,9,42,-23,15,-21,-33,56,-10,-53, 13,0,-9,-31,19,-59,-33,-3,-6,14,13,-28,-59,8,12,-69,-15,38,-7,8,35,-8,-53,-7,-70,-5,-51,-13,-40,-3,-59,16, 42,-56,2,-30,-23,-45,-64,-43,-99,17,-95,-34,-17,-58,-31,-55,-18,42,-32,-44,-1,-11,-83,-25,-74,58,1,-127,20,-56,-13,-3, 
  /* [61][2][][] */ 3,41,-34,69,72,-4,103,-14,51,-35,69,-51,40,17,74,68,-65,24,42,26,-26,46,67,31,92,-45,49,71,-65,98,37,17, -26,-14,-29,34,59,-87,67,9,-4,29,24,-3,16,34,38,37,-16,-9,-7,45,45,-13,55,23,79,-53,62,38,5,63,-1,-8, 20,-61,51,-23,-19,18,-19,-6,-83,15,-84,5,22,-34,-57,-43,-19,40,-53,18,-6,-2,-57,-56,-72,29,4,-93,26,-18,44,-16, 
  /* [62][0][][] */ 24,-73,-66,-28,-52,26,-25,8,-22,-6,2,3,46,-30,-2,-109,2,-15,37,17,19,25,-92,-76,-63,8,36,28,-20,-86,-20,51, 5,33,7,-53,-93,-14,-48,-26,-29,11,-12,-2,49,21,9,-11,5,-22,-31,-59,8,-37,-127,-42,-56,-9,9,-14,10,-20,-30,49, 29,-22,45,-77,-58,-18,-54,20,-58,22,-31,49,38,43,-30,2,34,-1,7,-30,7,-7,-86,-8,-103,-11,-7,-52,-14,34,-24,-21, 
  /* [62][1][][] */ 5,-66,-76,-55,-18,20,-50,38,-19,29,37,-2,-33,-26,-52,-11,7,48,21,32,19,-41,-25,-37,-91,-7,20,-18,-15,-30,17,-60, 22,-9,-35,4,-88,-8,-52,-36,-38,12,-44,-10,-59,-12,31,-58,-8,-9,-11,-31,14,-73,7,-60,-42,-70,-40,-60,4,-20,-70,-3, 20,0,-15,-66,-70,8,-14,42,-34,-10,-75,36,-36,21,13,-24,43,-14,-46,11,-46,-17,-30,6,-96,10,-62,-85,-4,-45,2,24, 
  /* [62][2][][] */ -14,-67,11,-73,-64,39,-81,1,-19,45,-38,16,-13,2,-63,11,5,30,-3,-2,21,-8,11,-28,-46,3,-20,0,-2,-1,6,-48, 20,-1,59,-11,-59,-2,-108,-15,-58,23,-44,32,-79,12,-26,-34,-25,1,-12,39,33,-45,3,25,-44,8,-64,-65,6,-61,-115,-38, 17,40,10,-39,-51,-33,-88,22,-79,22,-59,44,-34,-11,28,-50,13,20,4,0,-7,-32,-39,1,-64,42,35,-107,36,-99,-9,24, 
  /* [63][0][][] */ 22,3,2,-5,3,15,-30,27,-43,11,-31,-3,18,20,-3,-29,30,11,4,5,-8,-6,-43,16,-16,15,9,-31,14,-43,-10,23, -10,0,-15,-39,-27,-8,-76,5,-66,25,-53,13,-2,-16,8,-36,0,16,-16,-6,-3,7,-127,-34,-27,18,-5,-70,-17,-69,-37,13, 17,1,-8,-44,-50,-11,-38,19,-64,-2,-87,-5,16,-27,-12,-10,17,-8,-36,-32,11,23,-104,-36,-38,22,-31,-72,0,-63,-22,-5, 
  /* [63][1][][] */ 7,-32,-2,12,-27,16,1,-1,-19,0,-33,-3,-2,-40,-31,-29,-19,5,-17,3,6,3,-47,30,-12,25,-36,-5,-10,-50,-15,12, -9,16,0,59,65,-21,56,-37,51,-14,22,-6,-28,36,23,36,-1,-22,-2,-4,12,-6,60,29,57,-22,-35,29,-11,31,-4,-21, 2,12,-37,19,32,-38,2,3,-7,-18,39,-1,-10,30,27,22,-19,-13,6,21,4,-1,66,31,41,-2,-20,24,-2,43,30,-19, 
  /* [63][2][][] */ 11,-26,12,-30,-40,1,-20,12,-3,12,-54,9,3,-20,-57,-38,-11,10,-31,4,8,21,-81,15,-11,-2,-48,-44,-11,-21,-8,31, 13,-23,-17,2,9,-6,26,6,-5,5,-21,3,-9,-8,30,-16,-4,-13,-3,15,-15,24,-8,2,66,-3,-12,3,-17,34,-4,-1, -1,-21,-35,28,38,-5,47,28,31,-21,35,5,5,5,30,20,-30,-12,27,21,7,7,53,-1,56,-15,39,37,16,43,29,-4, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 64,3,3,32 } };
const TfArray<64, float> quant5_scale = { 64, { 0.0030826497822999954, 0.0025861987378448248, 0.0028889435343444347, 0.0027114336844533682, 0.002707623178139329, 0.0029127579182386398, 0.0036335180047899485, 0.002374354051426053, 0.0034914033021777868, 0.0024074597749859095, 0.0024824312422424555, 0.002856801263988018, 0.002740559633821249, 0.0032349356915801764, 0.0023580414708703756, 0.0026681737508624792, 0.0036091411020606756, 0.0025901591870933771, 0.0031851911917328835, 0.0024771655444055796, 0.0026116676162928343, 0.0026583806611597538, 0.002946978434920311, 0.0031878191512078047, 0.0022418287117034197, 0.0027768546715378761, 0.0029825407546013594, 0.0027022375725209713, 0.0028119483031332493, 0.0021185276564210653, 0.0025794415269047022, 0.0033194636926054955, 0.0027752742171287537, 0.0028898504097014666, 0.002627211157232523, 0.0025193041656166315, 0.0032169176265597343, 0.0028176167979836464, 0.0027096839621663094, 0.0025942383799701929, 0.0027865881565958261, 0.0025264045689254999, 0.0030264356173574924, 0.0027569923549890518, 0.0021474638488143682, 0.0022612712346017361, 0.0024000594858080149, 0.0020021118689328432, 0.0027017968241125345, 0.0028249956667423248, 0.0025257631205022335, 0.0024627221282571554, 0.002820001682266593, 0.0027341872919350863, 0.0020812763832509518, 0.0033135663252323866, 0.0028829339426010847, 0.0025645594578236341, 0.0035883754026144743, 0.0035811474081128836, 0.0022129085846245289, 0.0024798105005174875, 0.0028407829813659191, 0.0048037422820925713, } };
const TfArray<64, int> quant5_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[32] = { 136, -692, -1262, -226, -1195, -3912, -1045, -7676, -2879, -1820, -2096, -2924, -556, -4053, 272, -2225, -10094, -318, -1607, 1439, -1318, 1718, -807, -223, 221, 241, -2229, -2068, -7803, -279, -1802, -2714, };
const TfArray<1, int> tensor_dimension6 = { 1, { 32 } };
const TfArray<32, float> quant6_scale = { 32, { 7.6395508585846983e-06, 8.0493728091823868e-06, 1.4406421541934833e-05, 1.0196142284257803e-05, 1.4439513506658841e-05, 1.1185289622517303e-05, 1.1712143532349728e-05, 9.3777416623197496e-06, 1.0647195267665666e-05, 1.4159374586597551e-05, 1.243760470970301e-05, 9.4978831839398481e-06, 8.4107732618576847e-06, 9.3769804152543657e-06, 1.5275341866072267e-05, 1.6735075405449606e-05, 7.3281007644254714e-06, 9.6951516752596945e-06, 1.4374893908097874e-05, 9.5393997980863787e-06, 7.8127195592969656e-06, 1.2007922123302706e-05, 1.3401447176875081e-05, 8.9863760877051391e-06, 1.4100971384323202e-05, 6.510364528367063e-06, 1.2485424122132827e-05, 1.0601581379887648e-05, 8.6562831711489707e-06, 1.3664052858075593e-05, 1.0464779734320473e-05, 1.2546516700240318e-05, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[32*3*3*16] = { 
  /* [0][0][][] */ 3,6,-59,25,-38,-4,-86,-43,32,15,-5,37,-1,-98,-6,37, 2,-10,-14,5,-45,-56,1,-16,25,-22,-18,-29,30,-19,59,-21, -17,-83,-35,-28,-74,-77,-103,37,45,-29,-67,-60,50,31,10,11, 
  /* [0][1][][] */ -97,25,-70,28,-4,-24,1,-32,50,83,61,-8,-43,-41,-21,59, 33,-51,57,14,25,-22,-100,9,14,64,-9,33,-32,-67,-54,51, -25,88,35,-49,-114,-21,34,67,-16,-44,-41,68,-56,10,61,24, 
  /* [0][2][][] */ 50,-127,-9,35,23,-8,54,40,15,16,-11,-32,20,29,-31,46, -43,-9,59,-19,-87,0,-55,66,48,11,-41,-3,-95,-2,-7,48, -43,9,-8,3,-80,-50,38,39,-70,-46,7,3,-26,39,12,62, 
  /* [1][0][][] */ 82,61,65,52,61,-10,40,18,-16,4,54,61,-103,9,-5,57, 8,-51,-23,-58,38,-27,9,29,88,-38,-9,5,-61,31,32,-39, -14,-43,0,82,44,-19,-37,-66,42,-17,-48,7,14,64,20,84, 
  /* [1][1][][] */ 40,6,-14,-68,54,32,-10,60,-33,75,127,-22,5,-56,31,-22, -27,-5,-21,-110,26,48,-73,0,9,-96,18,-61,-40,7,-3,-28, 19,79,-46,-1,-31,-20,-58,43,16,-55,-57,-8,64,7,34,79, 
  /* [1][2][][] */ 62,-108,-45,-39,-9,-12,10,-6,-49,48,33,-84,39,-124,-3,67, 60,84,27,-19,-29,84,-61,75,27,-109,0,-99,-113,-104,6,64, 27,55,-9,-87,60,-54,-47,22,-54,-35,8,-33,14,-48,-34,23, 
  /* [2][0][][] */ 0,58,72,-1,29,30,53,45,25,12,52,-14,-23,17,24,19, 28,22,36,9,-12,41,15,5,-6,16,41,-12,-53,42,1,1, 19,-15,-6,-4,-35,10,-12,2,1,-8,-13,-38,-18,45,20,34, 
  /* [2][1][][] */ 6,-10,-16,-7,34,68,-1,-18,-35,7,-41,11,-26,-6,-21,-46, -28,-88,-38,-63,-11,-15,-42,-30,12,-11,-87,-18,-22,-27,-33,-4, 11,-43,-6,-3,10,-9,-32,-26,2,-45,-127,-17,-33,1,-10,-42, 
  /* [2][2][][] */ -21,-5,-127,-38,39,75,-17,-22,16,36,40,22,22,54,37,2, 37,35,-8,-48,-17,51,2,-35,39,8,11,13,43,5,-13,-6, -20,7,17,-2,-40,14,4,14,25,21,56,35,14,-13,34,15, 
  /* [3][0][][] */ -19,-53,3,22,52,-49,1,-9,-23,35,1,7,-80,39,0,-12, 6,22,50,5,-9,46,27,12,1,21,-7,-44,-40,-56,-37,-21, -3,18,13,-30,15,62,-47,18,-15,-39,54,-122,-40,-13,0,15, 
  /* [3][1][][] */ 37,55,19,17,15,52,-56,20,-57,-6,87,-60,-19,-54,-25,20, 27,22,33,26,70,-26,-91,-40,-45,4,28,-20,-24,-85,-3,0, -18,30,67,-40,71,17,-52,1,-34,-15,48,-7,8,-49,-57,-28, 
  /* [3][2][][] */ -7,-25,50,26,-67,55,12,-11,8,-34,82,-15,36,-39,-13,-20, 75,21,10,2,109,61,-21,-10,-11,9,44,-83,-80,-127,-14,-5, 44,24,26,-10,56,50,-22,72,44,-25,7,-45,-49,-66,-14,16, 
  /* [4][0][][] */ -4,-11,-22,6,-27,-40,-34,-31,-13,-19,-21,3,1,6,22,18, 9,10,-9,13,11,23,-4,2,-14,25,16,-25,-14,-27,23,10, -43,8,12,-4,10,29,-57,-25,-3,-4,-2,-83,23,-25,-28,-24, 
  /* [4][1][][] */ 29,32,21,-1,-5,-31,-28,18,-18,-25,0,11,-18,6,-19,15, 35,81,31,-32,31,36,-118,27,-23,-24,70,-38,-16,-22,-47,-24, 12,32,32,8,19,-23,-77,-1,17,15,3,-5,8,-56,3,2, 
  /* [4][2][][] */ -22,12,29,3,13,16,-45,24,37,-23,4,-12,8,-50,-36,-15, 32,76,49,31,18,70,-52,36,13,-30,95,-40,-68,-127,-29,18, -11,-2,43,26,54,19,-35,-12,-14,34,45,-53,0,-46,-12,27, 
  /* [5][0][][] */ -21,12,-26,12,-35,18,35,32,-2,-1,84,-40,-6,-58,-49,12, 35,37,-5,-22,48,51,28,64,17,-29,69,18,-37,36,24,-26, 19,25,49,48,38,83,24,54,6,25,20,-11,-14,38,-6,13, 
  /* [5][1][][] */ 28,30,43,-40,-35,-9,-28,26,-41,-70,-88,-25,-58,-17,-40,-17, 12,6,-24,-47,51,28,-43,10,-22,15,26,-33,-16,45,38,-10, -43,-39,30,18,66,39,-14,-5,-36,-1,15,-54,15,-10,-18,-13, 
  /* [5][2][][] */ -31,13,-127,17,-57,-6,50,23,1,-65,52,-47,-63,-14,-32,13, -25,-29,-87,-60,-2,49,13,26,14,-69,63,-36,28,-1,9,-31, 9,-7,-17,-54,32,41,8,23,-3,3,43,16,7,-28,-6,24, 
  /* [6][0][][] */ 17,-19,3,-31,-12,1,-29,25,26,20,-2,4,-37,-5,-11,-23, -12,26,30,11,16,38,-59,32,15,-17,-4,-46,-54,-85,-23,16, 50,75,73,-32,48,94,-105,15,-7,8,86,-92,-50,-89,-56,-16, 
  /* [6][1][][] */ 25,-11,50,33,-37,35,-32,26,-30,-7,-11,2,-35,19,-11,7, 44,78,97,-13,80,101,-57,-10,-26,1,77,-127,-95,-122,-81,39, -37,-13,71,11,33,70,20,-17,5,1,79,-16,-70,-98,-28,-36, 
  /* [6][2][][] */ -30,-52,-51,32,-27,-39,-25,-25,-20,25,-24,0,16,-11,-12,-29, 3,39,-7,0,17,45,-17,21,19,-47,43,-28,24,-49,-25,-29, -21,2,18,16,42,-40,28,0,23,19,-45,18,-29,-20,36,-34, 
  /* [7][0][][] */ -72,-55,-104,-49,-47,-28,-80,27,1,-39,6,11,-75,-3,-90,0, 22,74,21,-39,27,9,-7,-4,-24,-28,28,-14,53,127,-59,-9, 67,83,12,33,-25,61,5,-36,13,18,-30,44,-39,-17,61,-3, 
  /* [7][1][][] */ -61,2,-7,-60,-7,-31,-28,-24,-46,-66,63,14,-29,-53,3,19, 29,-21,16,-52,69,-8,3,6,5,-60,34,-28,44,59,-48,-74, 61,46,-14,12,64,102,-57,-17,34,6,-50,45,37,19,67,-82, 
  /* [7][2][][] */ 39,-19,34,-33,10,12,-53,1,-2,-91,11,-70,-70,-6,-27,-42, -26,43,28,-121,23,45,-9,-51,-55,-89,1,58,-51,10,25,-18, 31,34,-9,-40,34,41,34,-1,33,-11,38,-4,23,58,37,-4, 
  /* [8][0][][] */ 59,70,46,14,20,54,-32,25,-62,7,12,-15,-40,-12,-14,-1, -27,104,116,-2,44,66,-127,3,25,-59,34,-119,-66,-31,-56,-38, 47,78,33,-1,52,38,-95,10,1,-8,86,-77,-15,-21,-23,-21, 
  /* [8][1][][] */ 12,4,-14,-20,15,25,6,11,39,39,13,-109,24,-56,-63,21, -38,-27,59,-22,23,14,-29,-22,46,1,37,-97,-126,-58,-21,38, 30,-24,56,0,60,51,22,12,9,-4,33,-26,-51,-61,-21,28, 
  /* [8][2][][] */ 0,51,4,-36,-1,19,18,18,-11,-26,37,-66,36,-61,-41,21, -18,22,-36,-6,30,-34,-77,-18,-10,32,44,-84,-54,-86,-40,21, 25,80,1,20,8,65,-98,55,-9,16,38,-11,-17,-60,-81,-1, 
  /* [9][0][][] */ -20,50,-3,-9,3,-21,21,37,24,3,4,-2,0,-41,-7,22, -23,-4,-53,12,-10,-5,12,-11,26,-18,17,-45,-3,5,7,-18, -10,-25,11,23,1,-12,-17,-6,-23,8,-7,24,5,6,1,-5, 
  /* [9][1][][] */ -1,1,-2,36,-26,-17,24,30,36,10,-35,-58,-40,-50,-22,13, -17,-34,-127,2,-30,-28,12,30,14,-21,26,1,-28,28,1,13, 2,1,-21,35,18,2,-20,19,39,26,10,4,-4,55,-32,-1, 
  /* [9][2][][] */ -34,-53,43,-16,14,-52,21,-9,6,-9,13,-92,12,-8,-46,14, -2,-72,-27,-15,-37,-41,-22,8,-8,-9,-6,-1,-11,-48,-56,-12, 25,24,-41,1,-32,-14,-19,-13,27,-3,8,6,-25,13,14,17, 
  /* [10][0][][] */ -24,73,13,-29,34,18,-23,17,-20,36,17,3,-46,45,-2,4, 31,28,9,16,13,57,-64,38,-17,1,-6,-63,12,8,17,-4, -22,56,10,9,7,44,-34,18,23,1,78,-72,28,-15,-37,-9, 
  /* [10][1][][] */ 2,49,57,-28,42,24,-54,16,13,-37,42,-69,-73,-40,-21,-31, -29,-66,14,3,24,-62,-38,0,-35,17,40,-66,-65,-13,-43,25, 3,-16,35,0,45,7,-81,-12,24,44,52,-66,26,-45,-36,-5, 
  /* [10][2][][] */ 67,17,52,20,49,29,-6,-32,-5,-38,58,-75,-49,-21,-50,-32, 22,43,35,27,58,-14,-15,15,-35,9,27,-110,-127,-97,-11,-30, 6,54,53,18,81,55,-18,55,-42,58,33,-68,-29,-99,-52,11, 
  /* [11][0][][] */ -66,-32,-73,35,-54,-58,-75,-29,47,14,-85,-42,16,-56,-60,10, -1,73,-99,10,-20,8,23,11,28,-9,23,-13,-66,77,-52,4, -41,3,26,31,4,34,-31,5,-8,-25,-13,-54,-30,78,-2,-36, 
  /* [11][1][][] */ -42,-49,-46,31,-113,-94,-103,33,-13,-9,-127,17,-85,-39,-97,15, -35,17,-68,17,-63,-61,-8,24,-37,-57,44,42,-29,-73,25,31, 21,1,-23,45,30,27,-34,42,-15,-49,-10,15,-32,94,-20,7, 
  /* [11][2][][] */ -11,-13,-99,-9,-61,71,-4,18,46,-28,69,-27,-35,37,3,25, -6,12,-92,-61,-10,-7,7,17,-9,-9,59,3,51,90,29,29, 48,-13,-28,-40,37,77,-11,-1,40,-35,-7,-49,5,14,3,32, 
  /* [12][0][][] */ -20,-42,-40,-30,43,14,-66,-71,-28,-77,12,47,30,-52,-17,-55, -74,10,25,-68,77,22,-80,-86,-56,18,11,-80,-39,2,-27,-42, 9,70,-30,-48,-72,24,54,-92,-45,-81,13,73,-42,-24,33,-79, 
  /* [12][1][][] */ 5,50,29,-73,-127,90,25,-17,81,47,44,5,43,-112,49,24, 31,-66,47,-8,19,6,25,28,-21,27,72,-34,7,-46,-47,22, 17,-35,-46,16,-23,-13,-9,7,53,51,73,-25,-83,-34,32,-22, 
  /* [12][2][][] */ 35,107,-3,-104,1,-29,88,54,-38,29,9,0,24,-2,72,-42, 57,70,73,-51,-6,57,-48,-9,-38,-86,19,27,4,49,20,-61, 41,10,79,-106,8,-52,-21,-61,-64,-45,33,-28,-1,2,-2,-32, 
  /* [13][0][][] */ 5,37,65,46,-7,40,26,70,38,-21,85,-47,-78,-103,27,-16, 5,0,51,28,0,29,-26,105,19,-32,36,-2,-41,-56,20,15, -20,1,44,53,8,8,26,-49,63,53,-29,52,35,-23,4,80, 
  /* [13][1][][] */ 0,-8,8,2,32,54,-52,-4,-25,44,39,-3,-85,-86,18,35, 25,-45,40,-95,-8,31,-85,51,47,-9,41,8,-18,-40,8,33, -4,-53,-25,39,44,19,12,26,14,-36,2,-14,-9,51,-30,-27, 
  /* [13][2][][] */ 92,65,66,60,73,81,-63,58,-27,-35,109,-127,-17,-113,-48,16, 40,65,8,-95,56,85,-89,26,13,-38,120,-43,-63,-73,7,10, -42,-48,-40,-26,3,-21,6,-44,-2,-2,2,17,36,-1,-7,-26, 
  /* [14][0][][] */ 9,62,43,29,47,100,-29,8,-31,-7,127,-22,-11,-55,-2,-34, 2,-14,34,-57,18,-16,-62,7,31,-29,-6,-7,7,-76,12,-1, 6,-8,20,-18,-17,-43,-11,11,-19,-35,9,0,78,65,27,21, 
  /* [14][1][][] */ 19,-21,23,7,42,45,24,13,-5,-19,46,-46,-24,-70,-43,15, 3,44,22,-63,-4,29,-24,6,6,7,22,-51,-29,-51,7,9, -40,-43,2,7,0,-71,14,-36,-43,-42,-24,-14,12,30,14,-7, 
  /* [14][2][][] */ -1,-28,-36,-14,-21,4,20,-5,-7,20,47,31,-31,-18,6,6, -2,-18,12,-43,-17,24,28,27,-26,-17,41,-6,-10,-39,16,-20, -53,-46,12,5,3,-46,-13,5,-15,4,-14,-39,-10,9,-25,-6, 
  /* [15][0][][] */ 18,51,127,-13,8,-15,-31,-3,3,4,18,-38,-64,6,-18,20, 39,69,24,5,25,35,-33,37,-30,-49,65,-50,-27,-61,-3,16, 15,5,-9,-4,27,33,-49,34,-26,-23,13,5,-37,-5,18,13, 
  /* [15][1][][] */ 7,-4,61,22,17,-16,5,26,7,27,21,7,20,1,0,10, 35,-11,35,25,6,-2,2,11,4,23,25,20,-50,-63,-41,-2, 4,59,30,-15,61,63,-21,27,-16,-27,54,-60,-82,-27,-40,-20, 
  /* [15][2][][] */ 29,5,-36,11,-32,-42,-4,7,-6,28,13,2,-25,-40,23,-3, 29,3,53,-9,-6,33,-3,-14,31,15,-8,24,-33,-34,-5,-36, 38,20,9,3,50,47,21,3,31,4,11,12,-49,-34,-28,-25, 
  /* [16][0][][] */ 50,14,3,-82,10,96,-13,27,-13,-36,115,3,-26,69,41,-8, -39,0,6,-5,16,20,-63,4,-38,-48,54,-23,-8,84,-23,-28, 36,90,8,-21,-9,110,-54,-84,-23,-39,-57,70,17,-22,-31,-9, 
  /* [16][1][][] */ 60,76,-18,-19,-36,-8,12,49,42,-57,109,47,-11,42,-31,-1, -59,3,-8,-43,-22,27,-64,42,39,73,26,-34,25,86,-13,63, 41,-45,26,127,-20,3,-31,9,28,-21,65,44,-49,69,-5,-20, 
  /* [16][2][][] */ 38,-63,78,-24,-3,61,36,-36,-54,-69,-38,84,-67,-15,24,-1, 2,-61,11,-67,-14,-16,-41,19,-33,-17,6,-11,6,53,10,-83, 66,25,62,93,46,23,26,-39,26,12,-33,26,56,85,-11,45, 
  /* [17][0][][] */ -41,-2,-15,32,13,-20,-31,-23,-3,29,-60,-45,-48,-2,-5,14, 3,-7,48,52,-10,-15,-2,42,63,-3,-35,-40,-1,-52,-60,11, -3,-18,-84,44,-87,-116,-72,38,-14,-42,-29,-36,-2,15,-20,-18, 
  /* [17][1][][] */ 43,-36,-48,32,3,-9,29,-15,-29,29,-48,-9,19,8,30,-42, 33,-46,51,-19,-22,-69,35,16,44,14,-86,-55,25,-9,-1,-28, 8,-9,-4,-21,11,-59,-52,-23,-20,8,-127,32,21,22,35,-4, 
  /* [17][2][][] */ 19,-4,-75,1,-8,18,-26,-22,-34,52,-14,10,-28,28,-50,-2, 7,16,-39,23,-37,35,21,25,-1,-27,-50,7,-69,-20,22,-3, 3,-23,-83,-3,-21,-32,49,-9,51,-13,32,9,-53,-13,11,46, 
  /* [18][0][][] */ 68,86,127,-16,39,34,-8,8,10,-24,11,-62,-44,-26,-14,3, 43,-2,46,-25,28,33,-36,49,-27,-26,18,-7,-5,-8,-12,20, 19,3,21,12,18,-6,30,31,15,17,62,5,8,-16,1,23, 
  /* [18][1][][] */ 24,40,49,-22,34,78,5,-11,21,8,-1,-42,-101,-37,-16,-7, -16,12,21,32,29,39,-13,12,14,4,13,-31,-41,-83,-3,-13, 28,14,-25,-14,-19,51,30,36,-8,29,32,16,17,-57,14,-16, 
  /* [18][2][][] */ -4,43,29,-20,55,97,-9,-23,1,4,62,-15,-31,-4,8,-20, -31,-36,15,21,-6,8,-66,6,-14,12,-29,-34,-41,-13,-22,6, -22,6,-5,-4,-41,22,2,11,10,18,-13,-22,-4,-20,-10,-6, 
  /* [19][0][][] */ 7,-99,42,-6,49,33,29,-38,-30,-17,44,3,-112,-16,28,17, -10,47,-7,-41,-18,32,-36,68,13,3,39,-32,-19,-66,10,29, -114,-103,-55,44,-127,-3,2,31,-11,-1,-82,-65,-80,-78,-56,29, 
  /* [19][1][][] */ -11,88,66,-3,67,15,-62,30,-99,-63,79,-31,-94,-37,-55,-95, -27,7,2,-70,14,42,-42,69,-10,-63,17,-53,14,-54,-25,-7, -11,-74,-19,15,41,-27,-5,5,-62,12,-55,13,105,-4,-2,0, 
  /* [19][2][][] */ -1,-31,16,16,-15,66,49,42,75,15,68,18,2,-13,19,-69, -22,-38,14,-44,0,-17,17,-26,19,30,65,19,3,14,72,5, -15,-52,-51,1,-61,-2,-47,18,-15,59,-69,-24,108,-7,-8,3, 
  /* [20][0][][] */ -65,43,-64,43,12,-36,-20,-8,-94,40,0,-65,-23,6,2,-59, 1,-115,93,-46,32,-40,-12,53,-18,80,-24,-64,-40,10,-15,-58, 55,98,-39,-73,-93,-59,24,49,78,-3,51,-34,42,-15,20,50, 
  /* [20][1][][] */ -46,-73,-127,-51,82,76,-12,3,-70,47,69,29,19,31,-27,-9, -23,61,43,-6,-13,-4,49,23,69,60,-3,-24,7,-20,-22,51, -49,88,50,-14,-63,-59,-33,110,17,-65,-49,-71,-59,-58,-14,49, 
  /* [20][2][][] */ 24,-7,-84,59,47,-41,-47,-65,-22,78,-12,44,60,-67,50,9, -13,-127,2,107,-46,-75,10,-18,32,14,-49,44,-38,-88,-79,-36, -21,-52,-45,0,-98,2,66,-6,104,-42,55,10,-21,-9,3,22, 
  /* [21][0][][] */ -43,-58,-18,-12,-89,-24,-38,-47,-32,-18,-34,37,-56,-62,-31,-33, -27,-6,16,-42,-5,16,40,17,-57,41,98,-17,-3,-28,-6,-52, -55,17,57,0,26,46,21,8,28,36,-59,-76,-21,18,-69,-20, 
  /* [21][1][][] */ 7,-31,13,-22,-64,-44,22,-47,-9,-60,-94,-1,-7,37,54,-19, 2,-63,-50,-21,-14,-6,7,-44,-58,-5,9,3,-2,-21,14,-38, 20,41,37,-35,87,56,-32,32,-39,-25,-20,-34,30,27,-23,-53, 
  /* [21][2][][] */ -14,-26,-24,-53,-46,-29,29,2,-4,-6,5,16,-22,16,26,-12, 28,-55,9,-8,31,-12,21,-11,-50,12,-60,8,-12,1,5,8, -19,47,13,20,83,127,-9,52,37,-24,41,9,-12,-51,-34,-7, 
  /* [22][0][][] */ 13,92,97,10,15,41,-27,39,9,-37,39,-54,-97,-44,-25,-17, 48,110,39,-27,53,23,-127,13,30,-26,45,-61,1,-88,-34,-18, 17,2,43,4,-4,-23,-22,22,-23,5,-16,7,16,5,-25,2, 
  /* [22][1][][] */ 49,9,87,33,9,37,-11,8,2,-15,27,-90,-55,-68,-46,33, 41,16,2,2,54,38,-13,-34,19,-1,23,-53,-73,-99,-19,-1, 13,8,-11,9,10,-42,25,0,-31,24,-8,18,18,-6,-26,20, 
  /* [22][2][][] */ 0,15,-35,7,-36,-20,1,-11,10,35,-6,31,-9,-41,24,-18, 9,16,36,13,-6,-15,-12,-12,-11,-21,9,18,-5,-26,-2,-5, 43,-7,-8,-12,24,37,-44,33,-41,22,22,-6,-38,-9,-31,20, 
  /* [23][0][][] */ 16,-20,-9,58,34,54,39,-10,41,50,47,-10,-63,75,-37,16, 3,-22,81,-50,-19,28,-32,55,85,-47,-2,-28,-62,-8,13,62, -22,-31,29,21,-67,52,-41,-13,24,-48,-27,-52,25,-41,-58,45, 
  /* [23][1][][] */ -22,4,15,-49,64,52,-12,-22,-71,73,44,-52,30,-21,-26,-26, 2,-3,89,-61,-19,0,-81,-3,13,-56,-7,-118,18,-63,-77,-4, 50,51,-28,19,-18,-23,-13,-27,-27,-37,34,1,57,9,-48,6, 
  /* [23][2][][] */ -20,44,-39,-31,10,52,52,-1,-24,81,73,-127,-42,-44,14,5, 56,42,-2,-62,39,40,-60,18,-6,-4,38,-84,-27,-76,-10,18, 38,0,24,-47,50,81,-21,20,-39,-32,7,-59,28,-10,24,-36, 
  /* [24][0][][] */ -21,25,16,-10,-2,37,-60,22,33,-4,34,-18,-36,-19,-21,-3, 52,121,19,13,67,95,-119,24,-34,-8,94,-119,-54,-127,-37,-5, -37,-28,31,12,8,-39,-10,-22,22,-7,-26,13,43,-46,-32,-13, 
  /* [24][1][][] */ -16,-27,25,-1,13,-13,-12,-3,4,9,12,-45,4,-9,-34,-16, 55,16,51,-16,10,83,8,-14,-1,3,31,-51,-47,-111,-38,0, 36,19,16,-2,36,16,15,-19,-21,-29,8,-23,0,-18,-23,4, 
  /* [24][2][][] */ 14,-12,-64,-2,-43,-64,-4,14,10,12,3,21,39,-60,5,5, -5,-33,21,-27,-9,27,17,-6,14,5,-13,24,17,-32,-21,24, -8,-50,-15,-20,24,-29,-9,-36,9,24,-5,16,-28,-1,-44,2, 
  /* [25][0][][] */ 67,86,47,27,-90,-106,55,11,26,-22,-127,-39,-59,99,58,-43, 64,17,29,82,54,123,19,-73,2,71,-113,-14,-86,36,34,28, 84,15,26,-8,49,11,36,-8,-58,-4,-70,-123,3,5,62,-39, 
  /* [25][1][][] */ -39,-23,-36,-18,32,-29,-1,-64,16,-5,-71,28,7,-17,-2,-23, 42,6,26,1,44,-19,-25,-95,-81,-16,-100,26,-20,56,-20,-115, -49,41,19,-87,19,56,46,-47,-83,10,-111,-48,-29,-9,-32,11, 
  /* [25][2][][] */ -51,-45,-114,-17,16,55,43,-40,-29,-107,23,-17,111,30,34,45, 5,85,-38,-21,-59,4,71,78,69,-59,-11,32,-45,87,13,-49, -39,-3,-42,-49,-39,-15,66,-67,-6,98,6,-55,82,22,28,36, 
  /* [26][0][][] */ 56,68,35,-3,32,40,-8,11,29,49,75,12,-46,-29,-2,14, 29,52,17,-28,26,38,-11,13,13,-52,-3,-39,-14,-78,-11,-38, 6,-27,17,-24,-45,-12,-39,-49,-28,-24,33,35,26,-40,-54,3, 
  /* [26][1][][] */ 10,20,57,1,-9,19,27,15,-11,-8,47,58,-25,-24,7,-31, -14,18,1,-36,14,35,-63,72,33,20,127,-23,-5,-108,20,3, -38,-45,-53,-50,-37,-21,-64,44,-17,57,32,-11,-4,-115,-36,-50, 
  /* [26][2][][] */ 30,52,10,-9,-9,89,25,43,-20,-10,34,20,15,-11,15,2, 32,49,34,-17,-9,12,4,5,-44,-10,33,-21,-21,-32,-24,9, -33,-13,55,-38,43,-21,-3,2,-30,35,0,-75,-51,-3,-60,-1, 
  /* [27][0][][] */ 48,91,88,-33,1,42,-53,-21,-31,-28,6,-34,-58,22,19,-9, 31,19,75,-17,29,97,-67,-27,4,-21,17,-127,-35,-70,-51,-13, 33,46,-15,13,51,81,-55,51,-10,-29,111,-90,-4,-67,-15,35, 
  /* [27][1][][] */ -20,47,81,19,-13,-2,-14,-24,-17,-8,52,-91,-43,-84,-18,2, 1,43,28,26,98,69,-3,28,2,22,3,-96,-87,-110,-115,-35, 6,71,-4,-18,31,110,18,47,17,53,92,-69,-32,-98,-47,30, 
  /* [27][2][][] */ -67,-19,-49,-24,-20,-68,-5,-59,5,24,-36,-62,-13,3,-36,20, -14,42,12,2,39,45,-37,41,-18,21,61,-33,2,-39,3,23, -14,2,40,16,-2,96,7,0,21,24,16,48,-40,-24,3,-34, 
  /* [28][0][][] */ 35,-24,39,-22,17,-15,60,55,8,-49,37,-32,-57,113,20,34, 66,36,-32,67,30,8,62,-5,2,-44,10,-62,-106,53,2,-32, 44,45,70,4,35,42,53,51,55,-37,38,-16,-15,40,26,19, 
  /* [28][1][][] */ 61,127,73,-17,34,31,-48,9,7,-61,49,4,32,-32,-35,-17, -4,19,54,-1,10,-2,-6,15,-34,-18,-64,-66,-61,-18,-4,-42, -14,-7,-30,-40,14,-28,24,-4,14,9,46,-53,-25,-76,0,-48, 
  /* [28][2][][] */ 58,81,5,-44,43,72,1,-12,-22,6,38,43,9,5,76,-28, 36,63,67,-4,-40,10,-6,12,-27,-38,-17,-16,-34,25,8,5, 29,11,-4,1,-53,-21,-2,10,4,-75,7,-2,-38,-63,26,-28, 
  /* [29][0][][] */ 45,127,14,-29,63,45,-82,32,-28,-35,99,-112,-84,-88,-41,-45, -25,-18,21,-23,-4,-51,-39,10,13,0,27,-12,17,-40,21,-14, -47,-39,-37,9,-17,16,37,-20,8,-25,-43,18,51,11,29,-13, 
  /* [29][1][][] */ 34,23,62,21,34,51,-24,-27,29,9,59,-92,-38,-75,-35,14, -6,11,26,21,6,42,18,16,15,17,4,-51,-63,-46,-30,-6, -7,25,36,-3,52,20,-23,-10,-7,21,-4,6,-68,-38,-16,19, 
  /* [29][2][][] */ 18,3,-58,-2,-40,-24,20,-25,-17,-7,11,32,12,-63,-9,0, -1,8,-5,-27,0,-16,1,-27,28,-26,4,21,36,-21,-6,27, -40,-30,-25,27,-10,-27,-8,-49,28,-9,-26,-17,-17,22,-22,15, 
  /* [30][0][][] */ 48,78,11,28,69,47,-64,-6,23,-3,2,-80,-20,-52,30,2, -39,19,60,-15,17,-4,-42,-39,26,-9,-37,-48,-31,-21,-28,27, 14,31,20,9,3,63,-52,50,42,-24,44,-21,47,-43,-63,-11, 
  /* [30][1][][] */ 24,-39,-6,-31,8,-48,-7,-25,15,-3,29,23,-9,10,17,31, -28,-39,-20,27,-6,2,33,25,-27,-20,-33,42,-61,20,-14,-40, 22,-62,-17,27,1,-15,7,3,-6,47,-13,-76,-14,43,3,-26, 
  /* [30][2][][] */ 13,65,5,31,44,-36,-22,8,-6,-26,39,-59,-40,25,21,11, 39,15,66,-3,-10,58,16,-47,-31,-3,-45,67,-54,-127,30,30, -6,57,57,17,71,113,-11,42,-34,2,3,-23,-82,-35,-25,-35, 
  /* [31][0][][] */ -30,-8,-36,-94,-32,-56,-16,-15,56,-110,-51,-36,1,-38,-36,-19, -37,20,-27,-47,-18,7,-33,-9,-33,-35,69,20,31,56,-31,-18, 24,-17,45,61,30,-7,35,-12,-30,7,-49,3,26,31,-34,7, 
  /* [31][1][][] */ -4,-85,30,-15,29,53,-115,43,56,-66,25,31,8,-35,1,28, -8,-15,-127,-44,0,-4,10,43,20,85,90,-25,50,0,25,-25, 8,-26,39,39,30,42,23,10,14,43,17,-33,-5,-25,-36,11, 
  /* [31][2][][] */ 43,50,28,-20,27,55,16,18,-45,-67,33,-34,58,1,-21,63, 21,-54,-11,-13,89,-55,40,36,-52,17,-42,-30,40,2,6,4, 16,11,22,-16,43,17,-17,-33,29,-19,21,7,34,44,-29,3, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 32,3,3,16 } };
const TfArray<32, float> quant7_scale = { 32, { 0.0021967848297208548, 0.0023146308958530426, 0.0041426266543567181, 0.0029319433961063623, 0.0041521424427628517, 0.0032163767609745264, 0.0033678759355098009, 0.002696608891710639, 0.0030616454314440489, 0.0040715872310101986, 0.0035764852073043585, 0.0027311560697853565, 0.0024185529910027981, 0.0026963897980749607, 0.0043924883939325809, 0.0048122410662472248, 0.0021072260569781065, 0.0027878812979906797, 0.0041335606947541237, 0.002743094228208065, 0.0022465800866484642, 0.0034529282711446285, 0.0038536421488970518, 0.0025840699672698975, 0.004054793156683445, 0.0018720824737101793, 0.0035902359522879124, 0.0030485289171338081, 0.0024891502689570189, 0.0039291554130613804, 0.0030091912485659122, 0.0036078032571822405, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -3463, -2686, 535, -568, -1030, -6127, 1187, -13557, -16327, 4594, -2723, -16022, -257, -2641, -6646, -5565, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.6824923123931512e-06, 1.1367135812179185e-05, 1.1672278560581617e-05, 8.9885697889258154e-06, 6.7469472924130969e-06, 6.6251263888261747e-06, 9.5561063062632456e-06, 6.8682888922921848e-06, 4.7069388529052958e-06, 9.7382735475548543e-06, 7.6530477599590085e-06, 6.4707446654210798e-06, 1.2619171684491448e-05, 1.193675234389957e-05, 6.3800648604228627e-06, 8.0273312050849199e-06, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*3*3*8] = { 
  /* [0][0][][] */ 11,32,107,21,0,-33,63,18, -44,-4,8,12,-73,49,94,-45, -8,35,32,45,-10,28,60,32, 
  /* [0][1][][] */ -44,-23,80,41,121,-3,20,-63, -127,-110,34,43,-63,13,68,-56, -27,-30,51,70,49,79,32,-27, 
  /* [0][2][][] */ 0,28,-72,-12,4,39,37,5, 18,-37,-3,67,-28,37,-36,-41, 27,-20,12,99,2,-23,42,15, 
  /* [1][0][][] */ -76,23,-31,7,-12,-19,-22,3, -47,-9,-20,-8,14,34,55,36, 26,0,19,10,10,10,-7,3, 
  /* [1][1][][] */ -59,35,44,-8,-38,-26,50,-18, -58,7,27,2,-35,0,45,-32, -13,16,-8,16,-14,86,-19,10, 
  /* [1][2][][] */ -79,-70,61,-21,77,36,4,-22, -65,-96,10,45,21,4,-12,-14, -13,-127,32,81,-13,4,5,-23, 
  /* [2][0][][] */ -31,13,-31,3,11,-10,-17,15, -13,13,36,11,14,-48,22,30, -92,-20,4,-19,-18,19,48,0, 
  /* [2][1][][] */ -2,0,-45,-10,-50,10,39,24, -33,-5,20,-31,48,-5,-22,-29, -39,-127,22,34,26,3,-18,-19, 
  /* [2][2][][] */ -16,-37,-70,18,-59,5,-62,-20, -29,-3,33,28,26,15,8,20, 8,-81,-8,18,-26,-11,-2,-19, 
  /* [3][0][][] */ 73,18,10,-42,13,0,-40,12, 33,-26,-34,24,-23,17,-19,13, -61,22,-8,-38,17,17,30,22, 
  /* [3][1][][] */ 61,-7,20,-106,-17,-50,-48,-21, 25,6,-93,-71,-63,36,-11,34, -73,8,21,-21,-22,15,6,36, 
  /* [3][2][][] */ 46,54,31,-127,44,-24,5,-32, 13,-34,-73,-101,-58,-20,-2,28, -33,-23,10,-78,5,45,32,27, 
  /* [4][0][][] */ -78,-17,13,18,-79,-28,94,19, -106,-63,-53,-68,-42,34,30,-8, -23,24,50,-40,-39,49,-14,17, 
  /* [4][1][][] */ -127,-71,38,30,7,17,87,-47, -41,20,-72,-1,-120,56,-43,17, -34,-46,40,-15,75,2,79,15, 
  /* [4][2][][] */ -107,-115,44,86,12,-7,0,-64, -11,-70,-16,72,-55,-36,-36,42, 12,-73,-20,-23,72,-11,-43,49, 
  /* [5][0][][] */ -94,5,77,35,-3,-52,37,43, -124,0,-6,-14,23,38,26,-22, -51,46,41,83,21,62,-56,35, 
  /* [5][1][][] */ -96,7,68,8,81,-28,-28,-69, -127,-73,19,74,15,3,80,25, 3,-44,11,108,-98,51,64,4, 
  /* [5][2][][] */ 4,-21,-62,42,-58,72,-6,-12, -29,-94,-4,73,43,-53,5,-38, 12,-114,26,126,-37,0,-3,-36, 
  /* [6][0][][] */ 44,-7,73,49,-15,6,61,11, 0,-10,27,2,-8,37,48,29, -31,-14,7,31,2,36,28,-24, 
  /* [6][1][][] */ -5,-6,78,-43,-49,0,8,-22, 63,23,-51,-20,9,59,19,11, 4,-5,27,-77,-4,10,28,39, 
  /* [6][2][][] */ 29,-13,55,-127,-56,-42,-25,-56, 73,0,-57,-24,-1,19,-16,30, -48,75,7,-10,-52,-22,1,-21, 
  /* [7][0][][] */ -56,57,-54,-58,-47,86,90,27, -52,46,34,33,25,63,47,36, -14,4,-40,-18,49,75,69,20, 
  /* [7][1][][] */ -63,39,55,-41,77,-49,40,23, -99,-104,38,-4,-58,2,80,19, -93,-92,1,42,5,12,-38,49, 
  /* [7][2][][] */ -127,-83,46,-28,79,-15,14,47, -122,-70,53,44,58,-36,-38,8, -50,-90,15,60,-72,14,55,16, 
  /* [8][0][][] */ 30,-104,-4,4,66,24,-1,42, -127,-125,-76,111,115,11,-99,83, -104,-94,54,85,43,58,-42,-15, 
  /* [8][1][][] */ 11,-104,-82,22,-22,-47,12,-26, 8,-29,-1,26,75,87,-45,37, -60,-83,-12,6,45,59,86,45, 
  /* [8][2][][] */ 31,-83,89,-30,-9,-13,26,-15, 63,-87,83,-38,116,-41,-59,57, 58,55,-62,-41,14,-70,29,-48, 
  /* [9][0][][] */ -7,-9,-15,17,-53,32,15,25, -15,7,-1,-5,-4,33,-31,13, 32,1,-2,56,-12,19,6,36, 
  /* [9][1][][] */ -38,38,-22,-65,-73,37,-20,29, -37,-30,-9,-73,-29,-14,-95,-21, -47,18,46,-40,-16,-7,18,-24, 
  /* [9][2][][] */ -11,69,-104,-30,-47,1,-70,-4, -1,-62,-79,-25,-59,22,-127,30, -10,3,-34,-73,15,7,-116,-7, 
  /* [10][0][][] */ -114,-41,-8,14,29,-17,50,-17, -66,-46,-44,67,-35,-15,-57,16, 33,-62,-8,60,-8,54,-79,57, 
  /* [10][1][][] */ -53,30,5,25,-12,-4,43,22, -12,-42,32,-14,-53,-34,97,47, -46,50,-70,18,-4,82,-8,-2, 
  /* [10][2][][] */ -28,-60,-2,-1,46,-42,20,-5, -94,-48,70,55,23,23,-45,-28, -66,-127,-19,56,-55,-6,50,-44, 
  /* [11][0][][] */ -37,-64,-5,14,60,34,-8,-15, -31,-10,-49,-18,-5,-53,5,20, -39,7,-26,44,-38,18,-1,19, 
  /* [11][1][][] */ 117,0,111,0,72,-99,53,-73, 51,15,6,61,-28,-42,23,-80, 26,-54,17,69,-45,19,51,-63, 
  /* [11][2][][] */ 41,10,111,112,58,-84,-11,-23, 28,111,41,74,9,2,-91,-39, -8,37,-43,127,-31,68,36,29, 
  /* [12][0][][] */ -46,27,-62,57,-13,-20,-44,-13, 27,-6,-45,4,-42,22,-66,-14, 26,21,16,13,2,-20,-14,14, 
  /* [12][1][][] */ -74,-7,-66,10,8,29,15,11, -17,1,-29,-44,-8,0,6,-7, 3,21,17,-39,2,-4,10,26, 
  /* [12][2][][] */ 22,-68,-40,-127,2,-28,-3,-3, -23,-34,-11,-54,-14,-13,-3,-32, 54,33,34,8,22,-26,2,-7, 
  /* [13][0][][] */ -6,8,-127,-28,-38,-9,-94,-17, 14,-6,-30,-24,-52,-47,-53,-31, -21,-18,36,14,25,7,-29,24, 
  /* [13][1][][] */ -23,-14,-42,-38,27,19,20,4, -82,-1,-121,-21,-30,58,13,25, -24,-67,29,24,15,37,23,27, 
  /* [13][2][][] */ 31,43,-124,43,-24,-15,-58,-28, 33,35,-43,3,-12,-18,-53,-4, -7,7,15,7,12,26,13,19, 
  /* [14][0][][] */ 56,-27,82,10,-11,11,18,-40, 31,40,79,32,-8,-5,49,-58, 79,-22,35,77,7,-27,13,-60, 
  /* [14][1][][] */ 79,-32,37,-4,-51,57,18,-35, 53,58,43,57,42,17,46,-3, -21,73,-1,-18,0,24,-31,6, 
  /* [14][2][][] */ -10,25,9,-67,-53,83,-10,-49, -56,-43,-9,-44,49,-17,-9,-5, -19,115,18,-127,-5,-37,-4,1, 
  /* [15][0][][] */ -33,-11,-15,-36,25,4,-42,35, -12,13,15,-17,14,-16,10,23, -27,-29,28,-84,-25,-8,12,21, 
  /* [15][1][][] */ 13,-41,38,-98,19,54,-4,26, -13,-91,42,-65,-32,47,11,41, 7,17,12,-100,22,11,-27,-17, 
  /* [15][2][][] */ -16,18,-2,-27,3,-32,40,53, 2,27,27,56,1,-29,-25,-6, 30,0,29,-127,-29,-30,-46,30, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0028557844925671816, 0.0048577818088233471, 0.0049881855957210064, 0.0038412942085415125, 0.0028833295218646526, 0.0028312690556049347, 0.0040838327258825302, 0.0029351853299885988, 0.0020115254446864128, 0.0041616824455559254, 0.0032705545891076326, 0.0027652934659272432, 0.0053928433917462826, 0.0051012095063924789, 0.0027265411335974932, 0.0034305057488381863, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { 6823, -1227, 652, 2161, -3509, -7534, 3471, -21300, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 1.8267000996274874e-05, 1.5893918316578493e-05, 8.1901316661969759e-06, 8.5997253336245194e-06, 8.975545824796427e-06, 7.3346013778063934e-06, 9.2102409325889312e-06, 6.0528295762196649e-06, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*3*3*1] = { 
  /* [0][0][][] */ 14, 38, 19, 
  /* [0][1][][] */ 7, -73, -23, 
  /* [0][2][][] */ 43, -41, -127, 
  /* [1][0][][] */ -127, -67, 6, 
  /* [1][1][][] */ 48, -57, 72, 
  /* [1][2][][] */ -32, 63, 17, 
  /* [2][0][][] */ 103, 127, -91, 
  /* [2][1][][] */ -6, -96, -122, 
  /* [2][2][][] */ 70, 70, -68, 
  /* [3][0][][] */ -122, -38, 1, 
  /* [3][1][][] */ -127, 87, -48, 
  /* [3][2][][] */ 106, 19, 110, 
  /* [4][0][][] */ 105, -88, -67, 
  /* [4][1][][] */ 127, -100, -32, 
  /* [4][2][][] */ 41, 100, -27, 
  /* [5][0][][] */ -44, 31, -28, 
  /* [5][1][][] */ 31, 87, 83, 
  /* [5][2][][] */ -127, -8, 40, 
  /* [6][0][][] */ 85, 127, 12, 
  /* [6][1][][] */ 49, -22, -35, 
  /* [6][2][][] */ -50, -87, -95, 
  /* [7][0][][] */ 117, 2, 74, 
  /* [7][1][][] */ 34, 102, 18, 
  /* [7][2][][] */ -127, 66, -73, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0049356427043676376, 0.0042944489978253841, 0.0022129283752292395, 0.0023235983680933714, 0.0024251427967101336, 0.0019817687571048737, 0.0024885560851544142, 0.0016354410909116268, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0023399847559630871, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0023399847559630871, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0034776055254042149, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,8,8,16 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0034776055254042149, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,8,8,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0037562714423984289, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,4,4,32 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0037562714423984289, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,4,4,64 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0086318040266633034, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,2,2,64 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0086318040266633034, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,256 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0086318040266633034, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<1, float> quant21_scale = { 1, { 0.12246416509151459, } };
const TfArray<1, int> quant21_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,11,10 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 12 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 13,9,8 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 15,7,6 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 16 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 17,5,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,3,2 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8192), (TfLiteIntArray*)&g0::tensor_dimension0, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8192), (TfLiteIntArray*)&g0::tensor_dimension13, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4096), (TfLiteIntArray*)&g0::tensor_dimension15, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2176), (TfLiteIntArray*)&g0::tensor_dimension17, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1152), (TfLiteIntArray*)&g0::tensor_dimension18, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 256), (TfLiteIntArray*)&g0::tensor_dimension19, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 256), (TfLiteIntArray*)&g0::tensor_dimension21, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_29_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_29_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_29_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_29_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_29_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
