#include <stdio.h>

#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

// Callback function declaration
static int get_signal_data(size_t offset, size_t length, float *out_ptr);

// Raw features copied from test sample (Edge Impulse > Model testing)
static float input_buf[] = {0x0, 0x0, 0x10101, 0x0, 0x352c28, 0xcca99a, 0xdeb7a7, 0xd5afa1, 0xcea89c, 0xcca69b, 0xc8a198, 0x211a18, 0x0, 0x20101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10101, 0x0, 0x3a302c, 0xcdaa9a, 0xdab3a3, 0xcea79a, 0xcca499, 0xcda49a, 0xcba39a, 0xcba39b, 0x201918, 0x0, 0x20101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40303, 0x0, 0x9a8074, 0xe5bdac, 0xcba697, 0xcda599, 0xc9a198, 0xcaa29a, 0xcaa29a, 0xcca49c, 0x775f5a, 0x20101, 0x0, 0x10101, 0x10101, 0x10101, 0x10101, 0x10101, 0x10101, 0x10101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30202, 0x0, 0x4d4039, 0xceaa9a, 0xd1ac9c, 0xcba697, 0xc9a197, 0xc9a198, 0xc8a099, 0xc8a098, 0xc89f98, 0xd4aaa2, 0x775f5a, 0x0, 0x20202, 0x0, 0x0, 0x10101, 0x0, 0x0, 0x0, 0x20202, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20101, 0x0, 0x7f695f, 0xe7bfac, 0xcba697, 0xcaa497, 0xc8a096, 0xc8a097, 0xc8a099, 0xc8a098, 0xc69d97, 0xc89e99, 0xc69e97, 0xb8928d, 0x5e4a47, 0xd0a09, 0x14100f, 0x3f3230, 0x1e1817, 0x151110, 0x171211, 0x40303, 0x20201, 0x30302, 0x10101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x493d37, 0xdfb9a6, 0xcca897, 0xcca798, 0xc9a396, 0xc79f97, 0xc69e96, 0xc7a097, 0xc79f98, 0xc79e99, 0xc69e98, 0xc79e98, 0xcfa49e, 0xc9a09a, 0xc29a95, 0xc49b96, 0xc69d98, 0xc39b95, 0xc39b95, 0xc69e98, 0x463836, 0x0, 0x0, 0x20201, 0x10101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x493d37, 0xe5beab, 0xcda898, 0xcca698, 0xcaa398, 0xcaa29a, 0xc8a098, 0xc8a098, 0xc8a099, 0xc8a199, 0xc59f97, 0xc69f97, 0xc7a098, 0xc9a29a, 0xcba39b, 0xcca39c, 0xc8a099, 0xc9a09a, 0xc9a29a, 0xcca49c, 0xc59e96, 0x564541, 0x544440, 0x27201e, 0x0, 0x10101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x110e0d, 0x9c8275, 0xd8b2a0, 0xceaa9a, 0xcca699, 0xc8a296, 0xc7a096, 0xc8a098, 0xc8a198, 0xc8a299, 0xc8a299, 0xc7a298, 0xc8a299, 0xc9a399, 0xc9a39a, 0xc9a39a, 0xc8a299, 0xc8a299, 0xc7a199, 0xc9a49b, 0xc6a197, 0xc6a097, 0xd1a9a0, 0xdab0a6, 0xa88780, 0x1d1716, 0x0, 0x20202, 0x0, 0x0, 0x0, 0x0, 0x2d2622, 0xe6bfac, 0xd1ac9a, 0xcea999, 0xcaa598, 0xcaa498, 0xc9a398, 0xc8a398, 0xc8a399, 0xc8a298, 0xc9a399, 0xc9a399, 0xcaa49a, 0xcaa499, 0xcaa499, 0xc8a298, 0xc7a197, 0xcaa49a, 0xc8a298, 0xc8a299, 0xc7a199, 0xc8a299, 0xc39e95, 0xbf9a92, 0xd8aea4, 0x473935, 0x0, 0x30202, 0x0, 0x0, 0x0, 0x0, 0xc2a291, 0xd5b09e, 0xd2ad9b, 0xcda899, 0xcca69a, 0xcaa499, 0xcaa499, 0xcaa499, 0xcba59a, 0xc9a398, 0xc9a398, 0xcaa499, 0xcba59a, 0xcba59a, 0xcba59a, 0xcba59a, 0xcaa499, 0xc9a398, 0xc8a398, 0xc9a398, 0xc7a196, 0xc7a198, 0xc6a198, 0xc6a097, 0xc59f97, 0xb39189, 0x2e2623, 0xc0a09, 0x30202, 0x0, 0x0, 0x0, 0xe1bba8, 0xd6b19f, 0xd1ac9a, 0xcfaa9b, 0xcda79b, 0xcba59a, 0xcca69b, 0xcaa499, 0xc9a398, 0xcaa499, 0xcaa499, 0xcaa499, 0xcba59a, 0xcaa499, 0xcaa499, 0xcba69b, 0xcaa59a, 0xcaa499, 0xc8a297, 0xc7a196, 0xc7a196, 0xc7a197, 0xc7a196, 0xc6a096, 0xc5a097, 0xc6a198, 0xc7a198, 0x987a74, 0x0, 0x10101, 0x0, 0x0, 0xd9b4a2, 0xd6b19f, 0xd0ab99, 0xcda899, 0xcba599, 0xcaa49a, 0xcaa499, 0xc9a398, 0xc8a398, 0xcaa499, 0xcaa499, 0xcaa499, 0xcba59a, 0xcba59a, 0xcaa499, 0xcaa499, 0xcba59a, 0xcaa499, 0xcaa499, 0xc9a398, 0xc7a196, 0xc6a096, 0xc6a095, 0xc6a096, 0xc5a097, 0xc29d95, 0xc7a199, 0xb18f88, 0x2f2524, 0x0, 0x10101, 0x0, 0xd8b3a2, 0xd5b09e, 0xcfaa98, 0xcda898, 0xcca69a, 0xcba59a, 0xc8a297, 0xc8a398, 0xcba59a, 0xcaa499, 0xcaa499, 0xcaa499, 0xcba59a, 0xcba69b, 0xcca69b, 0xcba59a, 0xcba59a, 0xcaa499, 0xcaa499, 0xc9a398, 0xc8a297, 0xc59f94, 0xc59f94, 0xc6a096, 0xc49f97, 0xc49f97, 0xbf9a92, 0xcda59d, 0x9d7c79, 0x100b0c, 0x0, 0x10101, 0xe8c1ae, 0xd5b09e, 0xcfaa99, 0xcca798, 0xcca599, 0xcba59a, 0xcaa59a, 0xcba59a, 0xcba59a, 0xcba59a, 0xcba59a, 0xcba59a, 0xcba59a, 0xcba69a, 0xcba599, 0xcaa49a, 0xcaa499, 0xcba498, 0xcaa497, 0xcba599, 0xc9a398, 0xc8a297, 0xc6a196, 0xc6a296, 0xc5a097, 0xc5a097, 0xc19c94, 0xcda49d, 0x7f6462, 0x0, 0x30202, 0x0, 0x63524a, 0xd6b09e, 0xcea998, 0xcda798, 0xcaa497, 0xcaa499, 0xcaa499, 0xc9a398, 0xcaa499, 0xcca69a, 0xcaa498, 0xc9a499, 0xcaa59a, 0xcca69a, 0xcca699, 0xcba79a, 0xcaa698, 0xcba698, 0xcaa598, 0xcba599, 0xcaa49a, 0xc9a499, 0xc8a498, 0xc8a497, 0xc7a297, 0xc49f96, 0xc19c94, 0xbf9992, 0xc29896, 0x4e3b3d, 0x0, 0x30202, 0x443933, 0xd7b19f, 0xcea998, 0xcca798, 0xcaa497, 0xcaa499, 0xcaa498, 0xcaa598, 0xcca699, 0xcca699, 0xcaa497, 0xc9a396, 0xc9a397, 0xcba599, 0xcba699, 0xc9a698, 0xcaa798, 0xcba699, 0xcaa497, 0xcaa398, 0xc8a398, 0xc8a498, 0xc7a397, 0xc6a296, 0xc6a297, 0xc4a097, 0xc19c94, 0xc09a93, 0xcda2a0, 0x775a5d, 0x0, 0x0, 0xdfb9a6, 0xd6b19f, 0xd0ab99, 0xcca698, 0xcba599, 0xcba59a, 0xcaa599, 0xcba499, 0xcaa498, 0xcca699, 0xcba598, 0xcba598, 0xcba698, 0xcaa698, 0xcaa798, 0xcaa699, 0xcaa698, 0xcaa598, 0xcaa597, 0xcaa598, 0xc8a397, 0xc7a397, 0xc7a397, 0xc6a296, 0xc5a195, 0xc5a197, 0xc49f96, 0xc09c94, 0xcda39f, 0x6e5556, 0x0, 0x10101, 0xe5beab, 0xd4b09d, 0xd0ab9a, 0xcca798, 0xcca599, 0xcba59a, 0xcaa598, 0xcaa598, 0xcba699, 0xcba698, 0xcba699, 0xc9a597, 0xcaa699, 0xcba79a, 0xcba799, 0xcaa798, 0xcba799, 0xcaa698, 0xcba799, 0xcaa598, 0xcaa599, 0xc8a497, 0xc6a296, 0xc7a397, 0xc5a194, 0xc4a096, 0xc49f96, 0xbf9a92, 0xd3a9a3, 0x624e4c, 0x0, 0x70505, 0x8a7368, 0xd4b09d, 0xd0ab9a, 0xcea899, 0xcba699, 0xcba59a, 0xcba598, 0xc9a497, 0xcba799, 0xcaa698, 0xcaa698, 0xcaa698, 0xcaa698, 0xcaa699, 0xcaa69a, 0xcaa698, 0xcaa698, 0xcaa698, 0xcaa698, 0xc9a599, 0xc9a599, 0xc6a297, 0xc6a397, 0xc6a296, 0xc5a195, 0xc5a095, 0xc49f96, 0xc39e95, 0xc7a098, 0xa68581, 0x927373, 0x483639, 0x2a231f, 0xe1baa8, 0xd1ac9c, 0xcda89a, 0xcca69a, 0xcba59a, 0xcca699, 0xcba598, 0xcaa597, 0xcaa598, 0xcaa698, 0xcba89a, 0xcba799, 0xcaa698, 0xcaa598, 0xcaa598, 0xc9a597, 0xcaa698, 0xc9a597, 0xc8a497, 0xc8a598, 0xc8a497, 0xc7a396, 0xc6a296, 0xc5a195, 0xc39f94, 0xc49f96, 0xc59f96, 0xc19c93, 0xcfa6a1, 0x826766, 0x80607, 0x30202, 0x68564e, 0xd8b2a2, 0xc9a497, 0xcaa498, 0xcca69b, 0xcba598, 0xcba598, 0xcaa598, 0xc9a597, 0xcaa698, 0xcaa698, 0xcba598, 0xcba598, 0xcba598, 0xcaa497, 0xcaa698, 0xcaa698, 0xcaa698, 0xc9a598, 0xc9a598, 0xc8a498, 0xc8a497, 0xc8a497, 0xc6a397, 0xc29d94, 0xc39e95, 0xc59f96, 0xc19b94, 0xd2a8a1, 0x433634, 0x0, 0x20201, 0x0, 0x7b655c, 0xebc0b0, 0xd6aea2, 0xcda79c, 0xcba598, 0xcca598, 0xcba698, 0xc8a496, 0xc9a497, 0xcaa497, 0xcaa497, 0xc9a396, 0xcaa497, 0xcba699, 0xcaa698, 0xcaa598, 0xcaa598, 0xc9a599, 0xc9a599, 0xc8a498, 0xc7a397, 0xc39f93, 0xcaa599, 0xd3aca1, 0xcca59b, 0xbf9a91, 0xc69f97, 0xc7a098, 0x372c2a, 0x0, 0x30302, 0x0, 0x4d403a, 0xa5877c, 0x987c73, 0xc7a297, 0xcba59a, 0xcca69b, 0xcba599, 0xc9a396, 0xc9a497, 0xc9a496, 0xcaa497, 0xc9a396, 0xcaa497, 0xc9a597, 0xc9a597, 0xc9a397, 0xc9a398, 0xcaa499, 0xc9a499, 0xc8a599, 0xc4a195, 0xd0aa9e, 0xb39388, 0x866d66, 0xa4847d, 0xd9afa5, 0xc59e97, 0x433633, 0x0, 0x20202, 0x0, 0x0, 0x10101, 0x0, 0xc0a09, 0xbf9d91, 0xd1aa9f, 0xcba59a, 0xcba59a, 0xc9a499, 0xc9a397, 0xcaa498, 0xcaa599, 0xcba599, 0xcaa598, 0xcaa497, 0xcba598, 0xc9a398, 0xcaa499, 0xcaa498, 0xcaa498, 0xc7a297, 0xcaa699, 0xb19186, 0x332a26, 0x0, 0x211b19, 0x7d655f, 0x483a37, 0x0, 0x20101, 0x0, 0x0, 0x0, 0x101, 0xa0808, 0x997d72, 0xd4ae9f, 0xcba59a, 0xcba59a, 0xcaa499, 0xc9a497, 0xc8a297, 0xc9a398, 0xcaa499, 0xcaa499, 0xcba59a, 0xc9a395, 0xc9a397, 0xc9a499, 0xcaa499, 0xc9a499, 0xc8a498, 0xc5a296, 0xd8b1a4, 0x886f67, 0x0, 0x50505, 0x10101, 0x0, 0x10101, 0x10101, 0x0, 0x0, 0x0, 0x30302, 0x0, 0x8d7669, 0xe8c1ae, 0xcda99a, 0xcaa497, 0xc9a498, 0xcaa499, 0xc8a298, 0xc9a398, 0xc8a298, 0xc8a297, 0xc8a297, 0xc7a196, 0xc6a095, 0xc6a095, 0xc8a297, 0xc7a196, 0xc8a398, 0xcba59a, 0xcca69a, 0xa98a80, 0x1e1816, 0x0, 0x0, 0x10101, 0x30302, 0x20201, 0x0, 0x0, 0x0, 0x0, 0x30202, 0x0, 0x7e6a5e, 0xdab6a3, 0xd2af9e, 0xd0ad9e, 0xcca89b, 0xcba69b, 0xcba59a, 0xc9a398, 0xcaa499, 0xc9a398, 0xc8a297, 0xc7a196, 0xc6a095, 0xc59f94, 0xc8a297, 0xc9a398, 0xcaa499, 0xb9968c, 0x302725, 0xd0a09, 0x10101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbb9d8c, 0xdcb8a5, 0xcdaa9b, 0xcda99c, 0xcca99d, 0xcba79b, 0xc8a398, 0xc7a196, 0xc8a297, 0xc9a398, 0xc7a196, 0xc7a196, 0xc8a297, 0xc8a297, 0xc6a196, 0xd5aca1, 0x413531, 0x0, 0x30302, 0x10101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10101, 0x0, 0x6e5d52, 0xe8c2ad, 0xe1bbaa, 0xcfac9e, 0xceab9e, 0xcda99d, 0xcca89c, 0xcaa599, 0xcaa499, 0xc9a399, 0xc8a298, 0xc8a298, 0xcaa499, 0xc9a398, 0xc6a196, 0xd5aca1, 0x3e322f, 0x0, 0x40303, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70606, 0x4c4039, 0x887267, 0xeac3b1, 0xddb8a9, 0xd5b1a3, 0xd0ac9f, 0xcca99c, 0xcca79b, 0xcda79c, 0xcda79c, 0xcca69b, 0xcaa499, 0xcaa499, 0xc8a398, 0xd5ada1, 0x4b3c38, 0x0, 0x20101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40303, 0x0, 0x120f0e, 0x3b322d, 0x322a26, 0xb39588, 0xd9b4a6, 0xd8b3a5, 0xd5b1a3, 0xcca99b, 0xcca89b, 0xcca89b, 0xd5afa0, 0xd1ab9d, 0xcca699, 0xcca699, 0xc8a397, 0x413430, 0x0, 0x10101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40303, 0x30202, 0x0, 0x10101, 0xe0c0b, 0x352c28, 0xc6a598, 0x997f75, 0x151210, 0x14100f, 0x332a27, 0xb8988a, 0xc3a092, 0xd1ab9e, 0xcfa99d, 0xd4ada0, 0x2f2623, 0x0, 0x10101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    /* Paste your raw features here! */ 
};

int main(int argc, char **argv) {
    
    signal_t signal;            // Wrapper for raw input buffer
    ei_impulse_result_t result; // Used to store inference output
    EI_IMPULSE_ERROR res;       // Return code from inference

    // Calculate the length of the buffer
    size_t buf_len = sizeof(input_buf) / sizeof(input_buf[0]);

    // Make sure that the length of the buffer matches expected input length
    if (buf_len != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
        printf("ERROR: The size of the input buffer is not correct.\r\n");
        printf("Expected %d items, but got %d\r\n", 
                EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, 
                (int)buf_len);
        return 1;
    }

    // Assign callback function to fill buffer used for preprocessing/inference
    signal.total_length = EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE;
    signal.get_data = &get_signal_data;

    // Perform DSP pre-processing and inference
    res = run_classifier(&signal, &result, false);

    // Print return code and how long it took to perform inference
    printf("run_classifier returned: %d\r\n", res);
    printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n", 
            result.timing.dsp, 
            result.timing.classification, 
            result.timing.anomaly);

    // Print the prediction results (object detection)
#if EI_CLASSIFIER_OBJECT_DETECTION == 1
    printf("Object detection bounding boxes:\r\n");
    for (uint32_t i = 0; i < EI_CLASSIFIER_OBJECT_DETECTION_COUNT; i++) {
        ei_impulse_result_bounding_box_t bb = result.bounding_boxes[i];
        if (bb.value == 0) {
            continue;
        }
        printf("  %s (%f) [ x: %u, y: %u, width: %u, height: %u ]\r\n", 
                bb.label, 
                bb.value, 
                bb.x, 
                bb.y, 
                bb.width, 
                bb.height);
    }

    // Print the prediction results (classification)
#else
    printf("Predictions:\r\n");
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
        printf("  %s: ", ei_classifier_inferencing_categories[i]);
        printf("%.5f\r\n", result.classification[i].value);
    }
#endif

    // Print anomaly result (if it exists)
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    printf("Anomaly prediction: %.3f\r\n", result.anomaly);
#endif

    return 0;
}

// Callback: fill a section of the out_ptr buffer when requested
static int get_signal_data(size_t offset, size_t length, float *out_ptr) {
    for (size_t i = 0; i < length; i++) {
        out_ptr[i] = (input_buf + offset)[i];
    }

    return EIDSP_OK;
}
